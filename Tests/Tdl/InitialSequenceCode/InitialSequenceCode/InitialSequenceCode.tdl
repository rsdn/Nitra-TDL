external
{
  string External1 = "defaulte for External1";
  [DeployerPath]string DeployerPath;
}

suite type SuiteType
{
  Deployment SessionInitializer = Deploy6;
  Deployment SessionFinalizer   = Deploy5;
  int Xxx = 42;
}

suite Suite1 : SuiteType
{
  platform Platform;
  product Product1;
  SessionFinalizer = Empty;
  Arg1 = "qqq";
  S1();
}

suite Suite2 : SuiteType
{
  platform Platform;
  product Product1;
  SessionInitializer = Deploy3;
  Arg1 = External1;
  Name1 = Product1.Name;
  S1();
}

suite Suite : SuiteType =
  from (Product, Value, Deploy) in [(Product1, "1", Deploy5), (Product2, "2", Deploy6)]
  select
  {
    platform Platform;
    product Product;
    Arg1 = "qqq";
    S1();
  };

product type ProductType
{
  string Name;
  string Version = "1.0";

}

product Product1 : ProductType
{
  Name = "Product 1";
  Version = "1.1";
}

product Product2 : ProductType
{
  Name = "Product 2";
  Version = "2.1";
}

product Products : ProductType = Product1, Product2;

platform Platform;

scenario S1
{
  deployment Deploy2;
  environments (Platform, Product1);
  method Autotest.App2.Suites.GUI.GamingProfileTests.VideoPlayerWithGamingProfile;
  UniqueId = "20A84E6C-1028-48ED-B4E4-3DC8CB599E71";
  Timeout = "00:10";
}

deployment Deploy6 = Deploy1, Deploy5, Deploy2;

select deployment Deploy5(Name1)
{
  | "Product 1" => Deploy4
  | not-set     => Deploy1
}

deployment Deploy4 = Deploy3, Deploy1, Deploy2;
deployment Deploy3 = Deploy2(Arg1: "x");

deployment Deploy1(string Arg1 = "Default from Deploy1", bool Flag = true)
{
  KL.Autotests.Commands.LogMessage(Message: Arg1);
  KL.Autotests.Commands.ComplexOperation(IsVerbose: Flag);
}
deployment Deploy2(string Arg1 = "Default from Deploy2", string Name)
 script "Deploy2.ps1"
{
}
