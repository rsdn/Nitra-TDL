using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Runtime.GraphUtils;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Text;

using Tdl;

namespace DotNet
{
    [Record]
    public sealed class InvocationScope : Scope
    {
      _type        : TypeSymbol;
      _scope       : Scope;
      _globalScope : Scope;
      _context     : DependentPropertyEvalContext;


      private GetExtensionMethodContainers() : Seq[TopClassSymbol]
      {
        foreach (c is TopClassSymbol when c.HasExtensionMethod in _globalScope.GetAllSymbols())
          yield c;
      }

      private GetExtensionMethods() : Seq[DeclarationSymbol]
      {
        foreach (c in GetExtensionMethodContainers())
        {
          foreach (x in c.MemberTable.GetAllSymbols())
          {
            | m is Member.MethodSymbol when m.IsExtensionMethod =>
              def typeArgs = _context.CreateFreeTypeVars(m.TypeParameters.Length);
              def subst = SubstExtensionMethods(m, typeArgs);
              def unifier = TdlTypeUnifier.Instance;
              when (unifier.TryRequire(_type, subst.This.Type))
              {
                def extMethod = subst.SubstExtensionMethod();
                yield extMethod;
              }

            | _ => ()
          }
        }
      }

      BindExtensionMethod[TSymbol](reference : Reference, result : ref LightList[TSymbol]) : void
        where TSymbol : DeclarationSymbol
      {
        foreach (c in GetExtensionMethodContainers())
        {
          def br = c.Scope.Bind.[TSymbol](reference);
          when (br.HasResult)
          {
            foreach (s in br.GetSymbols())
            {
              match (s)
              {
                | m is Member.MethodSymbol when m.IsExtensionMethod =>
                  def typeArgs = _context.CreateFreeTypeVars(m.TypeParameters.Length);
                  def subst = SubstExtensionMethods(m, typeArgs);
                  def unifier = TdlTypeUnifier.Instance;
                  when (unifier.TryRequire(_type, subst.This.Type))
                  {
                    _ = unifier.Require(_type, subst.This.Type);
                    def extMethod = subst.SubstExtensionMethod();
                    match (extMethod)
                    {
                      | res is TSymbol => result.Add(res);
                      | _ => ()
                    }
                  }

                | _ => ()
              }
            }
          }
        }
      }

      public override Contains(reference : string) : bool
      {
        when (_scope.Contains(reference))
          return true;
        foreach (m when m.Name == reference in GetExtensionMethods())
          return true;
        false
      }

      public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
      {
        def br = _scope.Bind(reference);

        mutable results = LightList();
        BindExtensionMethod(reference, ref results);

        if (results.Count > 0)
        {
          when (br.HasResult)
            foreach (c in br.GetSymbols())
              results.Add(c);

          results.ToBindResult()
        }
        else
          br
      }

      public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
      {
        def br = _scope.Bind(isMatch);
        br
      }

      public override GetAllSymbols() : Seq[DeclarationSymbol]
      {
        foreach (s in _scope.GetAllSymbols())
          yield s;

        foreach (s in GetExtensionMethods())
          yield s;
      }

      public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], edges : List[string]) : void
      {
        IgnoreParams();
        _scope.ToDot(nodeToIdMap, nodes, edges)
      }

      public override Serialize(writer : System.IO.BinaryWriter, metadataWriter : Nitra.Serialization2.MetadataWriter) : void
      {
        IgnoreParams();
        throw System.NotImplementedException()
      }
    }
}
