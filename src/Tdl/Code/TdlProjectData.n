using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace Tdl
{
  public class TdlProjectData : DotNetProjectData
  {
    public this(backEnd : IDotNetBackEnd, context : DependentPropertyEvalContext, rootNamespace : NamespaceSymbol, scenarioParameterScope : TableScope, entityFieldsScope : TableScope, requiredScenarioParameters : ImmutableArray[FormalParameterSymbol], externalSymbol : ExternalSymbol, isTestMode : bool, baseProductType : ProductTypeSymbol, platformType : PlatformTypeSymbol, deploymentType : DeploymentTypeSymbol)
    {
      base(backEnd, context, rootNamespace);
      VmCapabilityScope             = rootNamespace.MemberTable.FilterWith(_ is VmCapabilitySymbol);
      ScenarioParameterScope        = VmCapabilityScope.HideWith(scenarioParameterScope);
      EntityFieldsScope             = entityFieldsScope;
      RequiredScenarioParameters    = requiredScenarioParameters;
      ExternalSymbol                = externalSymbol;
      ExternalSymbolTable           = externalSymbol.MemberTable;
      MethodScopeFactory            = MethodScopeFactoryImpl;
      IsTestMode                    = isTestMode;
      CommandScopeFactory           = fun (scope) { scope.FilterWith(symbol => GetCommandSymbolKind(symbol) == CommandSymbolKind.NamespaceOrCommand) }
      CommandParametersScopeFactory = fun (scope) { scope.FilterWith(symbol => (GetCommandSymbolKind(symbol) & CommandSymbolKind.InputOrOutput) != 0) }
      BaseProductType               = baseProductType;
      PlatformType                  = platformType;
      DeploymentType                = deploymentType;
    }

    public VmCapabilityScope             : Scope                                 { get; }
    public ScenarioParameterScope        : Scope                                 { get; }
    public EntityFieldsScope             : TableScope                            { get; }
    public RequiredScenarioParameters    : ImmutableArray[FormalParameterSymbol] { get; }
    public ExternalSymbolTable           : TableScope                            { get; }
    public ExternalSymbol                : ExternalSymbol                        { get; }
    public MethodScopeFactory            : ScopeFactory                          { get; }
    public IsTestMode                    : bool                                  { get; }
    public CommandScopeFactory           : ScopeFactory                          { get; }
    public CommandParametersScopeFactory : ScopeFactory                          { get; }
    public BaseProductType               : ProductTypeSymbol                     { get; }
    public PlatformType                  : PlatformTypeSymbol                    { get; }
    public DeploymentType                : DeploymentTypeSymbol                  { get; }

    private         _methodScopeFactoryCache    : Dictionary[int, bool] = Dictionary();
    private         _commandScopeFactoryCache   : Dictionary[int, CommandSymbolKind] = Dictionary();
    private mutable _stableGuidIncrementalValue : int = 0;

    public GetStableGuidIncrementalValue() : uint { _ = _stableGuidIncrementalValue; Interlocked.Increment(ref _stableGuidIncrementalValue) :> uint }

    MethodScopeFactoryImpl(scope : Scope) : Scope
    {
      def filter(symbol : DeclarationSymbol) : bool
      {
        mutable result;
        when (_methodScopeFactoryCache.TryGetValue(symbol.Id, out result))
          return result;

        def isTestMethod(m : Member.MethodSymbol) : bool
        {
          foreach (a in m.CustomAttributes)
          {
            def name = a.Name;
            when (name.StartsWith("Test"))
              return true;
          }
          false
        }
        def isTestMember(m : DeclarationSymbol) : bool
        {
          | method is Member.MethodSymbol => isTestMethod(method)
          | _                             => false
        }
        def isTestClass(c : TopClassSymbol) : bool
        {
          foreach (a in c.CustomAttributes)
          {
            def name = a.Name;
            when (name.Contains("Test") && c.Scope.GetAllSymbols().Any(isTestMember))
              return true;
          }
          false
        }
        def isNamespaceContainsTestClasses(ns : NamespaceSymbol) : bool
        {
          foreach (m when filter(m) in ns.MemberTable.GetAllSymbols())
            return true;
          false
        }

        when (symbol is VarSymbol)
          return true;

        result =
          match (symbol)
          {
            | NamespaceSymbol     as ns when isNamespaceContainsTestClasses(ns) => true
            | TopClassSymbol      as c  when isTestClass(c)                     => true
            | Member.MethodSymbol as m  when isTestMethod(m)                    => true
            | _                                                                 => false
          };

        _methodScopeFactoryCache[symbol.Id] = result;

        result
      }

      scope.FilterWith(filter)
    }

    [Memoize]
    public GetCommandParameters(symbol : DeclaredTypeSymbol) : ImmutableArray[Member.PropertySymbol * CommandSymbolKind]
    {
      mutable builder;
      foreach (s is Member.PropertySymbol in symbol.Scope.GetAllSymbols())
      {
        def kind = GetCommandSymbolKind(s);
        when ((kind %& CommandSymbolKind.InputOrOutput) != 0)
        {
          when (builder == null)
            builder = ImmutableArray.CreateBuilder();

          builder.Add((s, kind));
        }
      }

      if (builder != null)
        builder.ToImmutable()
      else
        ImmutableArray.Empty
    }

    public GetCommandSymbolKind(symbol : DeclarationSymbol) : CommandSymbolKind
    {
      mutable result;
      when (_commandScopeFactoryCache.TryGetValue(symbol.Id, out result))
        return result;

      match (symbol)
      {
        | NamespaceSymbol as ns =>
          foreach (m when GetCommandSymbolKind(m) != CommandSymbolKind.None in ns.MemberTable.GetAllSymbols())
          {
            result = CommandSymbolKind.NamespaceOrCommand;
            break;
          }

        | TopClassSymbol as c when c.IsTypeParametersCountEvaluated && c.TypeParametersCount == 0 =>
          foreach (a when a.Name == "CommandAttribute" in c.CustomAttributes)
          {
            result = CommandSymbolKind.NamespaceOrCommand;
            break;
          }

        | Member.PropertySymbol as p =>
          foreach (a in p.CustomAttributes)
          {
            match (a.Name)
            {
              | "InputAttribute" =>
                result = result %| CommandSymbolKind.Input;
                when (GetInputRequiredFlag(a))
                  result = result %| CommandSymbolKind.Required;

              | "OutputAttribute" => result = result %| CommandSymbolKind.Output
              | _ => ()
            }
          }

        | _ => ()
      }

      _commandScopeFactoryCache[symbol.Id] = result;

      result
    }

    private GetInputRequiredFlag(attribute : DeclarationSymbol) : bool
    {
      | inputAttribute is DotNet.CustomAttributeSymbol =>
        foreach (n when n.Name == "Required" in inputAttribute.NamedArguments)
        {
          when (n.Expression is CustomAttributeExpression.Bool(value))
            return value;
          break;
        }
        // default is true
        true
      | _ => true
    }
  }
}
