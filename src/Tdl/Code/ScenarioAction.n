using DotNet;

using Nitra;
using Nitra.Declarations;

using System;
using System.Collections.Immutable;

namespace Tdl
{
  [Record]
  public variant ScenarioAction
  {
    public Location : Location { get; }

    | Error { }
    | Method
      {
        //TypeSymbol         : DeclarationSymbol;
        //MethodSymbol       : Member.MethodSymbol;
        Expr               : Expr;
        MaxRebootsCountOpt : ValueOption[Expr];
        BinariesFolderOpt  : ValueOption[Expr];
        ContinueOnErrorOpt : ParsedValue[bool];
      }
    | Script
      {
        Name               : Expr;
        Arguments          : ImmutableArray[Expr];
        Defs               : ImmutableArray[Def];
        MaxRebootsCountOpt : ValueOption[Expr];
      }
    | Config        { path   : Expr; MaxRebootsCountOpt : ValueOption[Expr]; }
    | GTest
      {
        Name               : Expr;
        Arguments          : ImmutableArray[Expr];
        MaxRebootsCountOpt : ValueOption[Expr];
      }
    | XCode
      {
        Container          : Expr;
        XcodePath          : Expr;
        MaxRebootsCountOpt : ValueOption[Expr];
      }
    | VsTest
      {
        Container                   : Expr;
        VsTestRunCmdLineOpt         : ValueOption[Expr];
        FilterOpt                   : ValueOption[Expr];
        VsTestPlatformOpt           : ValueOption[Expr];
        VsTestFrameworkOpt          : ValueOption[Expr];
        VsTestAdditionalOptionsOpt  : ValueOption[Expr];
        MaxRebootsCountOpt          : ValueOption[Expr];
      }
    | Apk
      {
        Name               : Expr;
        FilterOpt          : ValueOption[Expr];
        RunnerPath         : Expr;
        MaxRebootsCountOpt : ValueOption[Expr];
      }
    | Marathon
      {
        TestContainerApk   : Expr;
        AppApk             : Expr;
        RunnerPath         : Expr;
        Filter             : Expr;
        BinariesFolder     : Expr;
        MaxRebootsCountOpt : ValueOption[Expr];
      }
    | Login
      {
        User               : Expr;
        Password           : Expr;
      }
    | Logoff           { }
    | LockWorkstation  { }
    | Reboot           { }
    | WaitForReboot    { TimeSpan : string; MaxRebootsCountOpt : ValueOption[Expr]; }
    | Barrier          { barrier : BarrierSymbol; }
    | BarrierGenerator { BarrierName : ImmutableArray[BarrierNamePart]; Timeout : TimeSpan; }

    public IsTest : bool
    {
      get
      {
        match (this)
        {
          | Method
          | Script
          | Config
          | GTest
          | XCode
          | VsTest
          | Apk
          | Marathon => true
          | Error
          | BarrierGenerator
          | Login
          | Logoff
          | LockWorkstation
          | Reboot
          | WaitForReboot
          | Barrier => false
        }
      }
    }
  }
}
