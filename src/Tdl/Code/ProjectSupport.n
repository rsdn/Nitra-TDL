using DotNet;

using Nitra;
using Nitra.BackEnd.Dnlib;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using System.Threading;

using ND  = Nitra.Declarations;

[assembly: ProjectSupport("TdlLang", typeof(Tdl.ProjectSupport))]

namespace Tdl
{
  public partial class ProjectSupport : IProjectSupport, IDisposable
  {
    public static EmptyDeploymentName      = "Empty";
    static NoLocation : Location           = Location(SourceSnapshot.Default.File, NSpan(0));
    static NoFile     : ProjectSystem.File = SourceSnapshot.Default.File;
    static NoSpan     : NSpan              = NSpan(0);

    public TestMode : bool { get; }
    mutable _backEnd : DnlibBackEnd;

    public this()
    {
      //assert2(false);
      def makeDefaultParameters(ast : ExprBase) : ValueOption[DefaultValue]
      {
        match (ast)
        {
          | DotNet.Expr.MemberAccess1(IsMemberEvaluated=false)
          | DotNet.Expr.MemberAccess1 as ma when !ma.Member.IsSymbolEvaluated => VNone()
          | DotNet.Expr.MemberAccess1 as ma => VSome(DefaultValue.Custom(Tdl.Expr.Reference(ma.Member.Symbol)))
          | x   is DotNet.Expr.SimpleName when !x.IsRefEvaluated || !x.Ref.IsSymbolEvaluated => VNone()
          | x   is DotNet.Expr.SimpleName when x.IsRefEvaluated && x.Ref.IsSymbolEvaluated => VSome(DefaultValue.Custom(Tdl.Expr.Reference(x.Ref.Symbol)))
          | _ => DotNet.Coverters.MakeDefaultParametersOpt(ast)
        }
      }
      DotNet.AstUtils.MakeDefault = makeDefaultParameters;
      DotNet.AstUtils2.ExtensionScopeFactory = CreateExtensionScopeFactory;
    }

    public CreateExtensionScopeFactory(globalScope : Scope) : ScopeFactory
    {
      def self(scope : Scope)
      {
        def globalScope = globalScope;
        assert(true);
        _ = globalScope;
        scope
      }

      self
    }

    public this(testMode : bool)
    {
      this();
      TestMode = testMode;
    }

    public Reset(project : Project) : void
    {
      when (_backEnd != null)
      {
        _backEnd.Dispose();
        _backEnd = null;
      }
      project.Data = null;
    }

    BindNs(scope : Scope, name : string) : Ref[NamespaceSymbol]
    {
      //assert2(false);
        def res = Reference(NoLocation, name).Bind.[NamespaceSymbol](scope);
      assert2(!res.IsUnresolved);
      assert2(!res.IsAmbiguous);
      assert2(res.Symbols.Length == 1);
      res
    }

    BindType(scope : Scope, name : string) : Ref[TopGenericTypeSymbol]
    {
      //assert2(false);
      def res = Reference(NoLocation, name).Bind.[TopGenericTypeSymbol](scope);
      assert2(!res.IsUnresolved);
      assert2(!res.IsAmbiguous);
      assert2(res.Symbols.Length == 1);
      res
    }

    public RefreshReferences(cancellationToken : CancellationToken, project : Project) : object
    {
      TdlTypeUnifier.InitInstance();

      def defineAlias(context : DependentPropertyEvalContext, systemNs : NamespaceSymbol, declaredIn : NamespaceSymbol, name : string, aliasName : string) : void
      {
        def symbolRef  = BindType(systemNs.Scope, name);
        unless (symbolRef.IsSymbolEvaluated)
          return;

        def symbol     = symbolRef.Symbol;
        def decl       = symbol.FirstDeclarationOrDefault :> IExternalTypeDeclaration;
        def aliasDecl  = ExternalTopTypeDeclaration.[TypeAliasSymbol](ND.Name(NoLocation, aliasName), decl.TypeDef);
        def alias      = aliasDecl.DefineSymbol(declaredIn.MemberTable);
        alias.Replacement = symbolRef;
        alias.TypeParametersCount = 0;
        alias.TypeParameters      = ImmutableArray.Empty;
        alias.DeclaredIn          = declaredIn;
        alias.EvalProperties(context);
      }

      when (_backEnd != null)
        _backEnd.Dispose();
      def backEnd = DnlibBackEnd();
      _backEnd = backEnd;
      backEnd.CancellationToken = cancellationToken;
      def typeType              = TdlType.TypeSymbol();
      def entityType            = TdlType.EntitySymbol();
      def barrierType           = TdlType.BarrierSymbol();
      def methodType            = FunctionTypeSymbol();
      def scenarioType          = TdlType.ScenarioSymbol();
      def context               = TdlDependentPropertyEvalContext(project, entityType, barrierType, methodType, scenarioType, typeType);
      def rootNamespace         = backEnd.LoadExternalSymbols(project.Libs, project.ProjectDir, project.CompilerMessages, context);
      def systemNsRef           = BindNs(rootNamespace.Scope, "System");
      when (systemNsRef.IsSymbolEvaluated)
      {
        def systemNs = systemNsRef.Symbol;

        defineAlias(context, systemNs, rootNamespace, "Object",  "object");
        defineAlias(context, systemNs, rootNamespace, "Void",    "void");
        defineAlias(context, systemNs, rootNamespace, "String",  "string");
        defineAlias(context, systemNs, rootNamespace, "Boolean", "bool");
        defineAlias(context, systemNs, rootNamespace, "Byte",    "byte");
        defineAlias(context, systemNs, rootNamespace, "SByte",   "sbyte");
        defineAlias(context, systemNs, rootNamespace, "Int16",   "short");
        defineAlias(context, systemNs, rootNamespace, "UInt16",  "ushort");
        defineAlias(context, systemNs, rootNamespace, "Int32",   "int");
        defineAlias(context, systemNs, rootNamespace, "UInt32",  "uint");
        defineAlias(context, systemNs, rootNamespace, "Int64",   "long");
        defineAlias(context, systemNs, rootNamespace, "UInt64",  "ulong");
        defineAlias(context, systemNs, rootNamespace, "Single",  "float");
        defineAlias(context, systemNs, rootNamespace, "Double",  "double");
        defineAlias(context, systemNs, rootNamespace, "Decimal", "decimal");
        defineAlias(context, systemNs, rootNamespace, "Char",    "char");

        methodType.Parameters = ImmutableArray.Empty;
        def symbolRef  = BindType(systemNsRef.Scope, "Void");
        when (symbolRef.IsSymbolEvaluated)
          methodType.Return = symbolRef.Symbol;
      }

      MakePredefinedSymbols(rootNamespace, context);

      def initTypeSymbol(type : DeclarationSymbol) : void
      {
        type.EvalProperties(context);
      }
      initTypeSymbol(methodType);
      initTypeSymbol(entityType);
      initTypeSymbol(scenarioType);


      def baseProductType            = MakeBaseProductTypeSymbol(context, rootNamespace);
      def platformType               = MakePlatformTypeSymbol(context, rootNamespace);
      def deploymentType             = MakeDeploymentTypeSymbol(backEnd, context, rootNamespace);
      def externalSymbol             = MakeExternalSymbol(context, rootNamespace);
      def scenarioParameterScope     = TableScope("ScenarioParameterScope");
      def requiredScenarioParameters = MakeScenarioParametersScope(backEnd, context, scenarioParameterScope);
      def entityFieldsScope          = MakeEntityFieldsScope(backEnd, context, TableScope("EntityFieldsScope"));
      def data                       = TdlProjectData(backEnd, context, rootNamespace, scenarioParameterScope, entityFieldsScope, requiredScenarioParameters, externalSymbol, TestMode, baseProductType, platformType, deploymentType);
      context.TdlProjectData         = data;

      def emptyDeployment = ExternalDeclaration.[Tdl.Deployment.EmptySymbol](NoLocation, EmptyDeploymentName, ignoreCase = true).DefineSymbol(rootNamespace.MemberTable);
      // TODO: эти свойства должны вычисляться в EvalProperties
      emptyDeployment.Type                       = deploymentType;
      emptyDeployment.Scope                      = EmptyScope.Instance;
      emptyDeployment.AllDeployments             = ImmutableArray.Empty;
      emptyDeployment.AggregateParametersScope   = EmptyScope.Instance;
      emptyDeployment.DashboardVisibleParameters = ImmutableArray.Empty;
      emptyDeployment.EvalProperties(context);
      initTypeSymbol(emptyDeployment);

      def dashboardVisible = ExternalDeclaration.[Tdl.PredefinedAttributes.DashboardVisibleSymbol](Location.Default, "DashboardVisible", ignoreCase = true).DefineSymbol(rootNamespace.MemberTable);
      initTypeSymbol(dashboardVisible);

      def triggerPath = ExternalDeclaration.[Tdl.PredefinedAttributes.TriggerPathSymbol](Location.Default, "TriggerPath", ignoreCase = true).DefineSymbol(rootNamespace.MemberTable);
      initTypeSymbol(triggerPath);
      data
    }

    private MakePredefinedSymbols(rootNamespace : NamespaceSymbol, context : TdlDependentPropertyEvalContext) : void
    {
      def stringType = BindType(BindNs(rootNamespace.Scope, "System").Scope, "String").Symbol;
      def int32Type  = BindType(BindNs(rootNamespace.Scope, "System").Scope, "Int32").Symbol;

      def internalNs = ExternalDeclaration.[NamespaceSymbol](ND.Name(NoLocation, "TdlInternals")).DefineSymbol(rootNamespace.MemberTable);
      internalNs.DeclaredInOpt = VSome(rootNamespace);
      internalNs.Scope = internalNs.MemberTable;
      internalNs.EvalProperties(context);

      def predefinedType = ExternalDeclaration.[TopClassSymbol](ND.Name(NoLocation, "Predefined")).DefineSymbol(internalNs.MemberTable);
      def flags = ModifierSet(context);
      flags.Add(Modifiers.Public | Modifiers.Static);
      predefinedType.Flags               = flags;
      predefinedType.DeclaredInOpt       = VSome(internalNs);
      predefinedType.DeclaredIn          = internalNs;
      predefinedType.Scope               = predefinedType.MemberTable;
      predefinedType.TypeParameters      = ImmutableArray.Empty;
      predefinedType.TypeParametersCount = 0;
      predefinedType.NestedTypes         = ImmutableArray.Empty;
      predefinedType.CustomAttributes    = ImmutableArray.Empty;
      predefinedType.BaseTypeSet         = BaseTypeReferenceSet(null);
      predefinedType.HasExtensionMethod  = false;
      predefinedType.FullName            = "TdlInternals.Predefined";
      predefinedType.EvalProperties(context);

      def getOrCreateBarrierMethod = ExternalDeclaration.[DotNet.Member.MethodSymbol](ND.Name(NoLocation, "GetOrCreateBarrier")).DefineSymbol(predefinedType.MemberTable);
      getOrCreateBarrierMethod.DeclaredInOpt = VSome(getOrCreateBarrierMethod);
      getOrCreateBarrierMethod.Scope = getOrCreateBarrierMethod.MemberTable;

      def param1 = ExternalDeclaration.[FormalParameterSymbol](ND.Name(NoLocation, "name")).DefineSymbol(getOrCreateBarrierMethod.MemberTable);
      param1.Type = stringType;
      param1.DeclaredInOpt = VSome(getOrCreateBarrierMethod);
      //param1.DeclaredIn = getOrCreateBarrierMethod;
      param1.EvalProperties(context);

      def param2 = ExternalDeclaration.[FormalParameterSymbol](ND.Name(NoLocation, "timeout")).DefineSymbol(getOrCreateBarrierMethod.MemberTable);
      param2.Type = stringType;
      param2.DeclaredInOpt = VSome(getOrCreateBarrierMethod);
      //param2.DeclaredIn = getOrCreateBarrierMethod;
      param2.EvalProperties(context);

      getOrCreateBarrierMethod.Parameters = ImmutableArray.Create(param1, param2);
      getOrCreateBarrierMethod.ReturnType = stringType;
      getOrCreateBarrierMethod.EvalProperties(context);

      def vmCapability = ExternalDeclaration.[TopEnumSymbol](ND.Name(NoLocation, "VmCapability")).DefineSymbol(rootNamespace.MemberTable);
      def flags = ModifierSet(context);
      flags.Add(Modifiers.Public);
      vmCapability.Flags               = flags;
      vmCapability.DeclaredInOpt       = VSome(rootNamespace);
      vmCapability.DeclaredIn          = rootNamespace;
      vmCapability.Scope               = vmCapability.MemberTable;
      vmCapability.CustomAttributes    = ImmutableArray.Empty;
      vmCapability.FullName            = "VmCapability";
      vmCapability.UnderlyingType      = int32Type;
      vmCapability.EvalProperties(context);

      foreach (capability in array["Unacceptable", "Acceptable", "Required"])
      {
        def symbol = ExternalDeclaration.[EnumMemberSymbol](ND.Name(NoLocation, capability)).DefineSymbol(vmCapability.MemberTable);
        symbol.DeclaredIn     = vmCapability;
        symbol.DeclaredInOpt  = VSome(vmCapability);
        symbol.Scope          = EmptyScope.Instance;
        symbol.FullName       = "VmCapability." + capability;
        symbol.Type           = vmCapability;
        symbol.EvalProperties(context);
      }
    }

    public TryIncrementalRefreshProject(cancellationToken : CancellationToken, before : IAst, after : IAst, data : object) : bool
    {
      IgnoreParams();
      def symbols = HashSet();
      def symbols = symbols;
      before.Accept(n => _ = symbols.Add(n), null);
      _ = symbols;
      false // we not support incremental refresh yet.
    }

    public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
    {
      def projectData           = data :> TdlProjectData;
      def backEnd               = projectData.BackEnd;
      def context               = projectData.Context :> TdlDependentPropertyEvalContext;
      def rootNamespace         = projectData.RootNamespace;
      context.CancellationToken = cancellationToken;
      backEnd.CancellationToken = cancellationToken;
      context.InitialDeployment = null;
      context.FinalDeployment   = null;

      def removeParsedSymbols(tableScope : TableScope)
      {
        when (cancellationToken.IsCancellationRequested)
          return;

        tableScope.Undefine(x => { cancellationToken.ThrowIfCancellationRequested(); x.IsParsed });
        foreach (symbols in tableScope.Symbols)
        foreach (symbol is NamespaceSymbol in symbols)
          removeParsedSymbols(symbol.MemberTable);
      }
      removeParsedSymbols(rootNamespace.MemberTable);
      removeParsedSymbols(projectData.ExternalSymbolTable);

      when (cancellationToken.IsCancellationRequested)
        return;

      def evalHost = TdlProjectEvalPropertiesHost(files, projectData);
      evalHost.EvalProperties(context, "SymbolHierarchy", 0);
      evalHost.EvalProperties(context, "Scopes", 1);
      evalHost.EvalProperties(context, "Stage 2", 2);
      evalHost.EvalProperties(context, "Stage 3", 3);
      evalHost.EvalProperties(context, "Stage 4", 4);
      evalHost.Finish();
      CheckScenarios(context, rootNamespace.MemberTable);
    }

    CheckScenarios(context : DependentPropertyEvalContext, root : TableScope) : void
    {
      def scenarios = root.AllSymbols.OfType.[ScenarioSymbol]().ToArray();
      CheckParallelScenarios(context, scenarios);

      def uniqueIds = scenarios.OfType.[Scenario.DefSymbol]()
        .Where(sd => sd.IsDefsEvaluated && sd.Defs.Any(d => d.Symbol.Name == "UniqueId"))
        .Select(sd => (sd, sd.Defs.Single(d => d.Symbol.Name == "UniqueId")));
      def toGuid(strGuid : string) : Guid
      {
          mutable guid;
          _ = Guid.TryParse(strGuid, out guid);
          guid
      }
      def groupedByDef = uniqueIds.GroupBy((_, d) => toGuid(d.Expr.GetValue().ToString()));

      foreach (group when group.Key != Guid.Empty && group.Count() > 1 in groupedByDef)
      {
        def names = string.Join(", ", group.Select((sd, _) => sd.Name));
        foreach ((scenario, d) in group)
        {
          def decl  = scenario.FirstDeclarationOrDefault :> Scenario.Def;
          foreach (definition when definition.IsSymbolRefEvaluated && definition.SymbolRef.IsSymbolEvaluated in decl.Definitions)
          {
            when (definition.SymbolRef.Symbol.Id == d.Symbol.Id)
            {
              definition.Reference.Error(context, $"Scenarios $names have the same UniqueId value $(group.Key).", 0);
            }
          }
        }
      }
    }

    CheckParallelScenarios(context : DependentPropertyEvalContext, scenarios : array[ScenarioSymbol]) : void
    {
      def scenarioSets = scenarios.OfType.[Scenario.SetSymbol]().Where(s => s.IsIsMultiMachineEvaluated && s.IsMultiMachine);
      def groups       = scenarioSets.Where(s => s.IsScenariosEvaluated)
                                     .SelectMany(mms => mms.Scenarios.Select(s => (mms, s)))
                                     .GroupBy((_, s) => s);

      foreach (group when group.Count() > 1 in groups)
      {
        def scenario = group.Key;
        def sets     = group.Select(((set, _), _) => set).ToArray();
        def names    = string.Join(", ", sets.Select(s => s.Name));
        foreach (set in sets)
        {
          def decl1 = set.FirstDeclarationOrDefault :> Scenario.Set;
          def r1    = decl1.Scenarios.FirstOrDefault(d => d.IsRefEvaluated && d.Ref.IsSymbolEvaluated && d.Ref.Symbol.Id == scenario.Id);
          when (r1 == null)
            continue;
          def msgs  = context.GetFileData(r1.Location.Source.File.Id).GetCompilerMessage();
          using (rootMsg = msgs.RootError(r1, $"Scenario $(scenario.Name) is included in several parallel scenarios: $names.", 0))
          {
            foreach (s when s.Id != set.Id in sets)
            {
              def decl2 = s.FirstDeclarationOrDefault :> Scenario.Set;
              def r2    = decl2.Scenarios.FirstOrDefault(d => d.IsRefEvaluated  && d.Ref.IsSymbolEvaluated && d.Ref.Symbol.Id == scenario.Id);
              when (r2 == null)
                continue;
              rootMsg.Warning(r2.Location, "Other entry", 0);
            }
          }
        }
      }
    }

    public GetSymbolById(data : object, symbolId : int) : ValueOption[DeclarationSymbol]
    {
      def projectData = DecomposeData(data);
      // TODO: cache symbols an use it cache to find symbol by id
      def findSymbol(symbols : Seq[DeclarationSymbol]) : ValueOption[DeclarationSymbol]
      {
        foreach (symbol in symbols)
        {
          when (symbol.Id == symbolId)
            return ValueOption.Some(symbol);

          match (symbol)
          {
            | t is GenericContainerTypeSymbol =>
              def result = findSymbol(t.NestedTypes);
              when (result.IsSome)
                return result;

            | NamespaceSymbol as ns =>
              foreach (symbols in ns.MemberTable.Symbols)
              {
                def result = findSymbol(symbols);
                when (result.IsSome)
                  return result;
              }

            | _ => ()
          }
        }

        ValueOption.None()
      }

      def result = findSymbol(projectData.RootNamespace.MemberTable.GetAllSymbols());
      when (result.IsSome)
        return result;

      ValueOption.None()
    }

    public DeconstructType(symbol : DeclarationSymbol, type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool
    {
      match (symbol)
      {
        | s is TopConstructedTypeSymbol    => type = s.TypeInfo; typeArgs = s.Args; true
        | s is NestedConstructedTypeSymbol => type = s.TypeInfo; typeArgs = s.Args; true
        | _ => type = null; typeArgs = ImmutableArray.Empty; false
      }
    }

    public VisitGlobalSymbols(data : object, callback : Predicate[DeclarationSymbol]) : void
    {
      def projectData = DecomposeData(data);
      _ = projectData.RootNamespace.VisitChildrenAndSelf(SymbolUtils.GetNestedSymbol, callback);
    }

    public Postprocessing(cancellationToken : System.Threading.CancellationToken, project : Nitra.ProjectSystem.Project, asts : System.Collections.Immutable.ImmutableArray[(Nitra.Declarations.IAst * bool)], data : object) : void
    {
      IgnoreParams();
    }

    public DecomposeData(data : object) : TdlProjectData
    {
      data :> TdlProjectData
    }

    public MakePlatformTypeSymbol(context : TdlDependentPropertyEvalContext, rootNamespace : NamespaceSymbol) : PlatformTypeSymbol
    {
      def symbol = ExternalDeclaration.[PlatformTypeSymbol](NoLocation, "PlatformType").DefineSymbol(rootNamespace.MemberTable);
      symbol.BaseTypeSet = BaseTypeReferenceSet(null);
      symbol.EvalProperties(context);
      symbol
    }

    public MakeDeploymentTypeSymbol(backEnd : IDotNetBackEnd, context : TdlDependentPropertyEvalContext, rootNamespace : NamespaceSymbol) : DeploymentTypeSymbol
    {
      def symbol = ExternalDeclaration.[DeploymentTypeSymbol](NoLocation, "Deployment").DefineSymbol(rootNamespace.MemberTable);
      symbol.BaseTypeSet = BaseTypeReferenceSet(null);
      symbol.EvalProperties(context);

      mutable index;

      def defineParameter(name : string, type : TypeSymbol, required : bool) : void
      {
        _ = DefineParameter(context, symbol.DeploymentImportFields, name, type, ref index);
        _ = required;
      }

      def platformType = backEnd.PlatformType;

      defineParameter("Source",     platformType.String, required=true);
      defineParameter("Name",       platformType.String, required=false);
      defineParameter("Parameters", platformType.Object, required=false);

      symbol
    }

    public MakeBaseProductTypeSymbol(context : TdlDependentPropertyEvalContext, rootNamespace : NamespaceSymbol) : ProductTypeSymbol
    {
      def symbol = ExternalDeclaration.[ProductTypeSymbol](NoLocation, "BaseProductType").DefineSymbol(rootNamespace.MemberTable);
      symbol.BaseTypeSet = BaseTypeReferenceSet(null);
      symbol.EvalProperties(context);
      symbol
    }

    public MakeExternalSymbol(context : TdlDependentPropertyEvalContext, rootNamespace : NamespaceSymbol) : ExternalSymbol
    {
      def decl   = PredefinedDeclaration(Name(NoLocation, "external"), fun() { ExternalSymbol() });
      def symbol = decl.DefineSymbol(rootNamespace.MemberTable) :> ExternalSymbol;
      symbol.EvalProperties(context);
      symbol
    }

    public MakeScenarioParametersScope(backEnd : IDotNetBackEnd, context : TdlDependentPropertyEvalContext, scenarioParameterScope : TableScope) : ImmutableArray[FormalParameterSymbol]
    {
      def requiredScenarioParametersBuilder = ImmutableArray.CreateBuilder();

      mutable index;

      def defineParameter(name : string, type : TypeSymbol, required : bool) : void
      {
        def parameter = DefineParameter(context, scenarioParameterScope, name, type, ref index);
        when (required)
          _ = requiredScenarioParametersBuilder.Add(parameter);
      }

      def platformType = backEnd.PlatformType;

      defineParameter("Area",                            platformType.String,  required=false);
      defineParameter("ArtifactsCollectionTimeout",      platformType.String,  required=false);
      defineParameter("EnforceBinariesFolderUniqueness", platformType.Boolean, required=false);
      defineParameter("LocalTestBinariesFolder",         platformType.String,  required=false);
      defineParameter("MaxRebootsCount",                 platformType.Int32,   required=false);
      defineParameter("NeedUnsignedAgent",               platformType.Boolean, required=false);
      defineParameter("ProductGroupName",                platformType.String,  required=false);
      defineParameter("RequireInternet",                 platformType.Boolean, required=false);
      defineParameter("ExternalAutotestId",              platformType.Int32,   required=false);
      defineParameter("RerunCountOnTestFailure",         platformType.Int32,   required=false);
      defineParameter("RerunCountOnTestSuccess",         platformType.Int32,   required=false);
      defineParameter("Responsible",                     platformType.String,  required=false);
      defineParameter("RevertAgentAfter",                platformType.Boolean, required=false);
      defineParameter("RevertAgentBefore",               platformType.Boolean, required=false);
      defineParameter("TfsId",                           platformType.Int32,   required=false);
      defineParameter("Timeout",                         platformType.String,  required=true);
      defineParameter("UniqueId",                        platformType.String,  required=true);

      requiredScenarioParametersBuilder.ToImmutable();
    }

    public MakeEntityFieldsScope(backEnd : IDotNetBackEnd, context : TdlDependentPropertyEvalContext, entityFieldsScope : TableScope) : TableScope
    {
      mutable index;

      def defineField(name : string, type : TypeSymbol, required : bool) : void
      {
        _ = required;
        _ = DefineParameter(context, entityFieldsScope, name, type, ref index);
      }

      def platformType = backEnd.PlatformType;

      defineField("Name",       platformType.String, required=true);
      defineField("BranchName", platformType.String, required=true);
      defineField("Version",    platformType.String, required=true);
      defineField("Type",       platformType.String, required=true);

      //requiredScenarioParametersBuilder.ToImmutable();
      entityFieldsScope
    }

    public Dispose() : void
    {
      when (_backEnd != null)
        _backEnd.Dispose();
    }

    private DefineParameter(context : TdlDependentPropertyEvalContext, table : TableScope, name : string, type : TypeSymbol, index : ref uint) : FormalParameterSymbol
    {
      def parameter      = ExternalDeclaration.[FormalParameterSymbol](NoLocation, name).DefineSymbol(table);
      parameter.Type     = type;
      parameter.Modifier = ParameterModifier.None;
      parameter.Index    = index;
      parameter.EvalProperties(context);
      ++index;
      parameter
    }
  }
}
