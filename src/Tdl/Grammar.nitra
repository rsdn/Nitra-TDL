namespace Tdl
{
  syntax module Grammar
  {
    using DotNet;
    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Expressions;
    using CSharp.Literals;
    using CSharp.TokenNames;
    using CSharp.TopDeclarations;
    using CSharp.Types;
    using CSharp.CS7;
    using CSharp.Attributes;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_', '-'..'-']+ ['0'..'9']* rule S;

    alias Attributes = AttributeSection*;

    [StartRule]
    syntax Module = MemberDeclaration*;

    regex TdlIdentifierPartCharacters = CSharp.CsIdentifiers.IdentifierPartCharacters | '-';
    regex LispIdent                   = CSharp.CsIdentifiers.IdentifierStartCharacter TdlIdentifierPartCharacters*;

    extend token Name
    {
      | String = '\"' Body=(!NotAllowedRegularStringLiteralChar Any)+ '\"'
      | ListStyle = Body=LispIdent
    }

    extend token Reference
    {
      | String = '\"' Body=(!NotAllowedRegularStringLiteralChar Any)+ '\"'
      | ListStyle = Body=LispIdent
    }

    syntax StringLiteral
    {
      | RegularStringLiteral  = Lit=RegularStringLiteral
      | VerbatimStringLiteral = Lit=VerbatimStringLiteral
    }

    syntax Parameters = "(" (FormalParameter; ","sm)* ")";

    syntax DeploymentScriptContent
    {
      | FilePath   = "script" sm Path=StringLiteral
      | SourceCode = "source" sm Text=StringLiteral nl "extension" sm Extension=StringLiteral
      | EmbedFile  = "file"   sm Path=StringLiteral
    }

    syntax DeploymentModifier
    {
      | Initial = "initial" sm
      | Final   = "final" sm
    }

    syntax MemberDeclaration
    {
      | Alias             = "using"    sm Name sm "=" sm QualifiedIdentifier ";" nl;
      | Open              = "using"    sm QualifiedIdentifier ";" nl;
      | Platform          = "platform" sm Name ";" nl;
      | PlatformSet       = "platform" sm Name sm "=" sm Platforms=(Reference; "," sm)+ ";" nl;
      | DeploymentScript  = Modifier=DeploymentModifier? "deployment" sm Name outline_begin_before Parameters outline_end_before nl DeploymentScriptContent nl DeploymentScriptBody;
      | DeploymentCode    = Modifier=DeploymentModifier? "deployment" sm Name outline_begin_before Parameters outline_end_before nl DeploymentCodeBody;
      | DeploymentSet     = Modifier=DeploymentModifier? "deployment" sm Name sm "=" sm Deployments=(DeploymentExpr; "," sm)+ ";" nl
      | Currying          = Modifier=DeploymentModifier? "deployment" sm Name Parameters? sm "=" sm Reference "(" (ParameterCurrying; "," sm)+ ")" ";" nl
      | DeploymentSelect  = Modifier=DeploymentModifier? "select" sm "deployment" sm Name "(" (Parameter; "," sm)+ ")"
                            "{" inl
                                Case*
                            d "}" nl outline_end_before
        {
          syntax Parameter = Name;
        }

      | ProductType       = "product" sm "type"   sm Name nl TypeBody;
      | Product           = "product"             sm Name sm ":" Type=Reference nl ProductBody;
      | ProductSet        = "product"             sm Name sm ":" Type=Reference sm "=" sm Products=(Reference; "," sm)+ ";" nl;
      | Scenario          = Attributes "scenario" sm Name Parameters? nl ScenarioBody;
      | ScenarioSet       = Attributes "scenario" sm Name sm "=" sm Scenarios=(Reference; "," sm)+ ";" nl;
      | ScenarioGenerator = Attributes "scenario" sm Name Parameters? sm "=" sm From+ sm "select" sm SelectScenario ";" nl;
      | ParallelScenario  = Attributes Parallel="parallel" sm "scenario" sm Name sm "=" sm Scenarios=(Reference; "," sm)+ ";" nl;
      | SuiteType         = "suite" sm "type"     sm Name nl TypeBody;
      | Suite             = "suite"               sm Name BaseType? nl SuiteBody;
      | SuiteList         = "suite"               sm Name sm "=" sm Suites=(Reference; "," sm)+ ";" nl;
      | SuiteGenerator    = "suite"               sm Name BaseType? sm "=" sm From+ sm "select" sm SuiteScenario ";" nl;
      | External          = "external"            sm ExternalBody;
      | Barrier           = "barrier"             sm Name "timeout" sm Timeout=StringLiteral ";" nl;
      | Entity            = "entity"              sm Name nl EntityBody;
    }

    syntax BaseType = sm ":" sm Type=Reference;

    syntax SuiteScenario = outline_begin_before
      "{" inl
          Entity?
          Platform
          Product
          DefDeclaration*
          SuiteStatement+
    d "}" nl outline_end_before
    {
      syntax Entity   = "entity" sm Reference ";" nl;
      syntax Platform = "platform" sm Reference ";" nl;
      syntax Product  = "product"  sm Reference ";" nl;
    }

    syntax SuiteBody = outline_begin_before "{" inl Entity? Platform Product DefDeclaration* SuiteStatement+ d "}" nl outline_end_before
    {
      syntax Entity   = "entity" sm Reference ";" nl;
      syntax Platform = "platform" sm Reference ";" nl;
      syntax Product  = "product"  sm Reference ";" nl;
    }

    syntax SuiteStatement
    {
      | CallTest = Scenario=Reference "(" ")" ";" nl;
    }

    syntax EntityBody = outline_begin_before "{" inl DefDeclaration* d "}" nl outline_end_before;

    syntax Case = Pattern+ "=>" Deployments=(DeploymentExpr; "," sm)+ nl
    {
      syntax Value
      {
        | String   = StringLiteral
        | Wildcard = "_"
        | NotSet   = "not-set"
      }

      syntax Pattern = "|" sm (Value; "," sm)+ sm;
    }

    syntax From = "from" VarDecl "in" List=DefExpr
    {
      syntax VarDecl
      {
        | Name
        | Tuple = "(" (Name; "," sm)+ ")"
      }
    }

    syntax SelectScenario = outline_begin_before
                            "{" inl
                                Filter? nl
                                Deployment nl
                                "environments" sm "(" Platform=Reference "," sm Product=Reference ")" ";" nl
                                Action nl
                                DefDeclaration*
                          d "}" nl outline_end_before
    {
      syntax Deployment   = "deployment" sm Reference ";" nl;
      syntax Filter = "filter" Condition=Expression ";" nl;
    }

    syntax Environments            = "environments" sm Elems=(Environment; "," sm; ?)+ ";" nl;
    syntax Environment             = "(" Platform=Reference "," sm Product=Reference ")";
    syntax Method                  = "method" sm Method=DefExpr MaxRebootsCount? BinariesFolder? ContinueOnError?";" nl;
    syntax Config                  = "config" sm Path=DefExpr MaxRebootsCount? ";" nl;
    syntax GTest                   = "gtest"  sm Name=DefExpr Arguments=DefExpr* MaxRebootsCount? ";" nl;
    syntax XCode                   = "xcode"  sm Container=DefExpr "path" sm XcodePath=DefExpr MaxRebootsCount? ";" nl;
    syntax VsTest                  = "vstest" sm Container=DefExpr VsTestRunCmdLine? Filter? VsTestPlatform? VsTestFramework? VsTestAdditionalOptions? MaxRebootsCount? ";" nl;
    syntax Apk                     = "apk"    sm Name=DefExpr Filter? "runner" RunnerPath=DefExpr MaxRebootsCount? ";" nl;
    syntax Marathon                = "marathon" sm "tests" TestContainerApk=DefExpr "app" AppApk=DefExpr "runner" RunnerPath=DefExpr Filter BinariesFolder MaxRebootsCount? ";" nl;
    syntax Filter                  = "filter" Value=DefExpr;
    syntax VsTestRunCmdLine        = "vstest_cmdline" sm Value=DefExpr;
    syntax VsTestPlatform          = "platform" sm Value=DefExpr;
    syntax VsTestFramework         = "framework" sm Value=DefExpr;
    syntax VsTestAdditionalOptions = "additional_options" sm Value=DefExpr;
    syntax Script                  = "script" sm Name=DefExpr Arguments=DefExpr* Environments? MaxRebootsCount? ";" nl
    {
      syntax Environments = "(" Defs=(DefEnv; ", ")+ ")";
    }
    syntax Action
    {
      | Method
      | Config
      | Script
      | GTest
      | XCode
      | VsTest
      | Apk
      | Marathon
      | Sequence = "sequence" sm  "{" inl SequenceAction* d "}" nl outline_end_before
    }
    regex TimeSpan = DecimalDigit DecimalDigit ":" DecimalDigit DecimalDigit ":" DecimalDigit DecimalDigit | "";
    syntax SequenceAction
    {
      | Method
      | Config
      | GTest
      | XCode
      | VsTest
      | Apk
      | Marathon
      | Script
      | Login           = "login" sm User=DefExpr sm Password=DefExpr ";" nl;
      | Logoff          = "logoff" ";" nl;
      | LockWorkstation = "lock-workstation" ";" nl;
      | Reboot          = "reboot" ";"
      | WaitForReboot1  = "wait" sm  "for" sm "reboot" sm TimeSpan ";"
      | WaitForReboot2  = "wait-for-reboot"            sm TimeSpan ";"
      | Barrier         = "barrier" sm Expression ";"
    }

    syntax DeploymentExpr
    {
      | Reference
      | Reboot = "reboot" Timeout=StringLiteral
    }

    syntax ParameterCurrying = Reference ":" sm DefExpr;

    syntax ScenarioBody = outline_begin_before "{" inl Filter? Deployment Environments Action DefDeclaration* d "}" nl outline_end_before
    {
      syntax Deployment   = "deployment" sm Reference ";" nl;
      syntax Filter = "filter" Condition=Expression ";" nl;
    }

    syntax ProductBody = outline_begin_before "{" inl DefDeclaration* d "}" nl outline_end_before;

    syntax TypeBody = outline_begin_before "{" inl Field* DefDeclaration* d "}" nl outline_end_before;

    syntax ExternalBody = outline_begin_before "{" inl Fields=Field* d "}" nl outline_end_before;

    syntax Field = Attributes AnyType sm Name DefExprOpt=(sm "=" sm DefExpr)? ";" nl;

    syntax DeploymentScriptBody = outline_begin_before "{" inl DefDeclaration* Options=DeploymentOption* d "}" nl outline_end_before;

    syntax DeploymentOption
    {
      | Success    = "expected"                      sm Value=DecimalIntegerLiteral ";" nl;
      | ForReboot1 = "expected" sm "for" sm "reboot" sm Value=DecimalIntegerLiteral ";" nl;
      | ForReboot2 = "expected-for-reboot"           sm Value=DecimalIntegerLiteral ";" nl;
      | Timeout    = "timeout"                       sm Value=StringLiteral ";" nl;
    }

    syntax DeploymentCodeBody = outline_begin_before "{" inl Commands=CommandCall* Options=DeploymentOption* d "}" nl outline_end_before;

    syntax CommandCall = Command=QualifiedIdentifier "(" Arguments=(CommandCallArgument; ","sm)* ")" ";" nl;

    syntax CommandCallArgument
    {
      | Input  = ParameterName=Reference ":" sm Value=DefExpr
      | Output = ParameterName=Reference ":" sm "out" sm "var" sm VariableName=Name
      | InputShort = Reference
    }

    syntax DefDeclaration
    {
      | Ordinary   = !Predicate Reference sm "=" sm DefExpr ";" nl;
      | Predefined = &Predicate Reference sm "=" sm DefExpr ";" nl;

      void Predicate = PredefinedName s "=";
      regex PredefinedName = "SessionInitializer" | "SessionFinalizer";
    }
    syntax DefEnv         = Reference sm "=" sm DefExpr;

    syntax DefExpr
    {
      | ListLiteral = "[" Elements=(DefExpr; "," sm; ?)* "]"
      | StringLiteral
      | "true"
      | "false"
      | RealLiteral;
      | DecimalIntegerLiteral     = Lit=DecimalIntegerLiteral
      | HexadecimalIntegerLiteral = Lit=HexadecimalIntegerLiteral
      | Reference
      | Tuple = "(" Items=(DefExpr; "," sm; ?)+ ")"
      //| InterpolatedRegularStringLiteral  = Lit=InterpolatedRegularStringLiteral
      //| InterpolatedVerbatimStringLiteral = Lit=InterpolatedVerbatimStringLiteral
    precedence MemberAccess:
      | MemberAccess = Expr=DefExpr "." Member=Reference
    }

    syntax MaxRebootsCount = sm "max-reboots" sm Value=DefExpr;

    syntax BinariesFolder = sm "bins" sm Value=DefExpr;

    syntax ContinueOnError = sm "continue-on-error";
  }
}
