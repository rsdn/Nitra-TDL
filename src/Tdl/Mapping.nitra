using DotNet;
using Nitra;
using Nitra.Declarations;
using System;

namespace Tdl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Следующий код добавляет в шарповые идентификаторы поддержку идентификаторов в Lisp-стиле и "заковыченых"

  map syntax Grammar.Name.String    -> Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));
  map syntax Grammar.Name.ListStyle -> Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));

  map syntax Grammar.Name.String(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }
  map syntax Grammar.Name.ListStyle(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }

  map syntax Grammar.Reference.String    -> Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));
  map syntax Grammar.Reference.ListStyle -> Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));

  map syntax Grammar.Module -> Module
  {
    Name = Name(Location.FromStart(), Location.Source.File.FullName);
    MemberDeclarations -> Members;
  }

  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  map syntax Grammar.MemberDeclaration -> NamespaceMember
  {
    | Open             -> UsingOpenDirective  {               QualifiedIdentifier -> NamespaceOrTypeName; }
    | Alias            -> UsingAliasDirective { Name -> Name; QualifiedIdentifier -> NamespaceOrTypeName; }
    | Platform         -> Platform.Def        { Name -> Name; }
    | PlatformSet      -> Platform.Set        { Name -> Name; Platforms.Item1 -> Platforms; }
    | DeploymentScript -> Deployment.Script
      {
        Name                                 -> Name;
        DeploymentScriptContent              -> Content;
        Parameters.FormalParameters.Item1    -> Parameters;
        DeploymentScriptBody.DefDeclarations -> Definitions;
        DeploymentScriptBody.Options         -> Options;
        Modifier                             -> Modifier;
      }
    | DeploymentCode   -> Deployment.Code
      {
        Name                                 -> Name;
        Parameters.FormalParameters.Item1    -> Parameters;
        DeploymentCodeBody.Commands          -> Commands;
        DeploymentCodeBody.Options           -> Options;
        Modifier                             -> Modifier;
      }
    | DeploymentSet    -> Deployment.Set      { Name -> Name; Modifier -> Modifier; Deployments.Item1 -> Deployments; }
    | Currying         -> Deployment.Currying
      {
        Modifier -> Modifier;
        Name -> Name;
        match (ParametersOpt)
        {
          | Some(x) -> x.FormalParameters.Item1
          | None()  -> []
        } -> Parameters;
        Reference -> BaseDeployment;
        ParameterCurryings.Item1 -> CurredParameters;
      }
    | DeploymentSelect -> Deployment.Select   { Name -> Name; Modifier -> Modifier; Parameters.Item1 -> Parameters; Cases -> Cases; }
    | DeploymentImport -> Deployment.Import
      {
        Name -> Name;
        Parameters.FormalParameters.Item1    -> Parameters;
        DeploymentImportBody.DefDeclarations -> Definitions;
        Modifier -> Modifier;
      }
    | ProductType      -> ProductType         { Name -> Name; TypeBody.Fields -> Fields; [] -> TypeBase; TypeBody.DefDeclarations -> Definitions; }
    | Product          -> Product.Def         { Name -> Name; Type -> ProductType; ProductBody.DefDeclarations -> Definitions; }
    | ProductSet       -> Product.Set         { Name -> Name; Type -> ProductType; Products.Item1 -> Products; }
    | Scenario         -> Scenario.Def
      {
        Name                                    -> Name;
        match (ParametersOpt)
        {
          | Some(x) -> x.FormalParameters.Item1
          | None()  -> []
        } -> Parameters;
        ScenarioBody.Deployment.Reference       -> Deployment;
        ScenarioBody.Action                     -> Actions;
        ScenarioBody.Environments.Elems.Item1   -> Environments;
        ScenarioBody.DefDeclarations            -> Definitions;
        Attributes                              -> Attributes;
        match (ScenarioBody.FilterOpt)
        {
          | Some(x) -> Some(x.Condition)
          | None()  -> None()
        } -> FilterOpt;
      }
    | ScenarioGenerator -> Scenario.Generator
      {
        Name                                      -> Name;
        match (ParametersOpt)
        {
          | Some(x) -> x.FormalParameters.Item1
          | None()  -> []
        } -> Parameters;
        Froms                                     -> Froms;
        SelectScenario.Deployment.Reference       -> Deployment;
        SelectScenario.Action                     -> Actions;
        SelectScenario.Platform                   -> Platform;
        SelectScenario.Product                    -> Product;
        SelectScenario.DefDeclarations            -> Definitions;
        Attributes                                -> Attributes;
        match (SelectScenario.FilterOpt)
        {
          | Some(x) -> Some(x.Condition)
          | None()  -> None()
        } -> FilterOpt;
      }
    | ScenarioSet       -> Scenario.Set { Name -> Name; Scenarios.Item1 -> Scenarios; IsMultiMachine = ParsedValue(Span.StartPos);  Attributes -> Attributes; }
    | ParallelScenario  -> Scenario.Set { Name -> Name; Scenarios.Item1 -> Scenarios; IsMultiMachine = ParsedValue(Parallel, true); Attributes -> Attributes; }
    | SuiteType         -> SuiteType    { Name -> Name; TypeBody.Fields -> Fields; }
    | Suite             -> Suite.Def
      {
        Name                         -> Name;
        match (BaseTypeOpt)
        {
          | Some(x) -> Some(x.Type)
          | None    -> None()
        } -> TypeOpt;

        match (SuiteBody.EntityOpt)
        {
          | Some(x) -> Some(x.Reference)
          | None    -> None()
        } -> EntityOpt;

        match (SuiteBody.PlatformOpt)
        {
          | Some(x) -> Some(x.Reference)
          | None    -> None()
        } -> PlatformOpt;

        match (SuiteBody.ProductOpt)
        {
          | Some(x) -> Some(x.Reference)
          | None    -> None()
        } -> ProductOpt;

        SuiteBody.DefDeclarations    -> AllDefinitions;
        SuiteBody.SuiteStatements    -> Statements;
      }
    | SuiteList        -> Suite.List
      {
        Name         -> Name;
        Suites.Item1 -> Suites;
      }
    | SuiteGenerator   -> Suite.Generator
      {
        Name                         -> Name;
        Froms                        -> Froms;
        match (BaseTypeOpt)
        {
          | Some(x) -> Some(x.Type)
          | None    -> None()
        }-> TypeOpt;
        match (SuiteScenario.EntityOpt)
        {
          | Some(x) -> Some(x.Reference)
          | None    -> None()
        }-> EntityOpt;
        SuiteScenario.Platform.Reference -> Platform;
        SuiteScenario.Product.Reference  -> Product;
        SuiteScenario.DefDeclarations    -> AllDefinitions;
        SuiteScenario.SuiteStatements    -> Statements;
      }
    | External -> External { Name = Name(Location.WithSpan(KwExternal.FromStart()), "external"); ExternalBody.Fields -> Fields; }
    | Barrier  -> Barrier  { Name -> Name; Timeout -> Timeout; }
    | Entity   -> Entity   { Name -> Name; EntityBody.DefDeclarations -> Definitions; }
    | VmCapability -> VmCapability
      {
        Name -> Name;
        match (DefExprOpt)
        {
          | Some((_, e)) -> Some(e)
          | None -> None()
        } -> Value;
      }
    | Runner -> Runner
      {
        Name -> Name;
        Parameters.FormalParameters.Item1 -> Parameters;
        RunnerBody.DefDeclarations -> Definitions;
      }
  }

  map syntax Grammar.DeploymentModifier -> DeploymentModifier
  {
    | Initial -> Initial {}
    | Final   -> Final {}
    | Export  -> Export
      {
        match(ExportParametersOpt) { | Some(p) -> p.References.Item1 | None() -> [] } -> Parameters;
      }
  }

  map syntax Grammar.MemberDeclaration.DeploymentSelect.Parameter -> FormalParameter
  {
    Name         -> Name;
    Expr.Nop { } -> Default;
    []           -> Attributes;
    QualifiedReference.Simple { Name = Reference(Name.Location.FromEnd(), "string"); } -> Type;
    Modifier = ParsedValue(Name.Span.FromEnd(), ParameterModifier.None);
  }

  map syntax Grammar.DeploymentScriptContent -> DeploymentScriptContent
  {
    | FilePath   -> FilePath   { Path -> Path; }
    | SourceCode -> SourceCode { Text -> Text; Extension -> Extension; }
    | EmbedFile  -> EmbedFile  { Path -> Path; }
  }

  map syntax Grammar.Case -> Case*
  {
    Patterns(Deployments.Item1)
  }

  map syntax Grammar.Case.Value -> CaseValue
  {
    | String   -> String   { this.StringLiteral -> Value; }
    | Wildcard -> Wildcard { }
    | NotSet   -> NotSet   { }
    | Else     -> Else     { }
  }

  map syntax Grammar.Case.Pattern(deployments : DeploymentExpr*) -> Case
  {
    Values.Item1 -> Values;
    deployments  -> Deployments;
  }

  map syntax Grammar.From -> From
  {
    VarDecl -> Vars;
    List    -> List;
  }

  map syntax Grammar.From.VarDecl -> Var*
  {
    | Name  -> [Var { Name -> Name; }]
    | Tuple -> this(Names.Item1)
  }

  //HACK: отсутствует оператор map! маппинг Tuple написан инлайновым кодом
  map syntax Grammar.From.VarDecl(_names : Name*) -> Var*
  {
    | Name -> this
  }

  map syntax Grammar.From.VarDecl.Tuple(names : Name*) -> Var* =
  {
    def items = array(names.Count);
    foreach (n in names with index)
      items[index] = Var(n.Location, n);
    Var.AstList(names.Location, items);
  };

  map syntax Grammar.DeploymentExpr -> DeploymentExpr
  {
    | Reference -> DeploymentReference { Reference -> Reference; }
    | Reboot    ->
      let timeout : CSharp.StringLiteral = Timeout in
      DeploymentReboot
      {
          Name = Name(Location, "Reboot-" + TdlUtils.ConvertStringLiteral(timeout));
          timeout -> Timeout;
          None() -> Modifier;
      }
  }

  map syntax Grammar.Method -> Action.Method
  {
    Method -> Method;
    match (BinariesFolderOpt)
    {
      | None    -> None()
      | Some(x) -> Some(x)
    } -> BinariesFolderOpt;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
    ContinueOnErrorOpt = ContinueOnErrorOpt.ToBool();
  }

  map syntax Grammar.Config -> Action.Config
  {
    Path -> Path;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
  }

  map syntax Grammar.GTest -> Action.GTest
  {
    Name      -> Name;
    Arguments -> Arguments;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
  }

  map syntax Grammar.XCode -> Action.XCode
  {
    Container -> Container;
    XcodePath -> XcodePath;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
  }

  map syntax Grammar.Script -> Action.Script
  {
    Name      -> Name;
    Arguments -> Arguments;
    match (EnvironmentsOpt)
    {
      | None    -> []
      | Some(x) -> x.Defs.Item1
    } -> Definitions;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
  }

  map syntax Grammar.VsTest -> Action.VsTest
  {
    Container -> Container;
    match (VsTestRunCmdLineOpt)
    {
      | Some(x) -> Some(x.Value)
      | None()  -> None()
    } -> VsTestRunCmdLineOpt;
    match (FilterOpt)
    {
      | Some(x) -> Some(x.Value)
      | None()  -> None()
    } -> FilterOpt;
    match (VsTestPlatformOpt)
    {
      | Some(x) -> Some(x.Value)
      | None()  -> None()
    } -> VsTestPlatformOpt;
    match (VsTestFrameworkOpt)
    {
      | Some(x) -> Some(x.Value)
      | None()  -> None()
    } -> VsTestFrameworkOpt;
    match (VsTestAdditionalOptionsOpt)
    {
      | Some(x) -> Some(x.Value)
      | None()  -> None()
    } -> VsTestAdditionalOptionsOpt;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
  }

  map syntax Grammar.Apk -> Action.Apk
  {
    Name      -> Name;
    match (FilterOpt)
    {
      | Some(x) -> Some(x.Value)
      | None()  -> None()
    } -> FilterOpt;
    RunnerPath -> RunnerPath;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
  }

  map syntax Grammar.Marathon -> Action.Marathon
  {
    TestContainerApk   -> TestContainerApk;
    AppApk             -> AppApk;
    RunnerPath         -> RunnerPath;
    Filter             -> Filter;
    BinariesFolder     -> BinariesFolder;
    MaxRebootsCountOpt -> MaxRebootsCountOpt;
  }

  map syntax Grammar.RunnerCall -> Action.Runner
  {
    Name -> Name;
    RunnerArguments.Item1 -> Arguments;
  }

  map syntax Grammar.RunnerCall.RunnerArgument -> RunnerArgument
  {
    match (NameOpt)
    {
      | Some((r, _)) -> RunnerArgument.Named      { DefExpr -> Value; r -> ParameterName; }
      | None         -> RunnerArgument.Positional { DefExpr -> Value; }
    }
  }

  map syntax Grammar.Action -> Action*
  {
    | Script     -> [ Script ]
    | Config     -> [ Config ]
    | GTest      -> [ GTest ]
    | XCode      -> [ XCode ]
    | VsTest     -> [ VsTest ]
    | Apk        -> [ Apk ]
    | Marathon   -> [ Marathon ]
    | Method     -> [ Method ]
    | RunnerCall -> [ RunnerCall ]
    | Sequence -> SequenceActions
  }

  map syntax Grammar.MaxRebootsCount -> DefExpr { Value }

  map syntax Grammar.Filter -> DefExpr { Value }

  map syntax Grammar.SequenceAction -> Action
  {
    | RunnerCall          -> RunnerCall
    | Method              -> Method
    | Script              -> Script
    | Config              -> Config
    | GTest               -> GTest
    | XCode               -> XCode
    | VsTest              -> VsTest
    | Apk                 -> Apk
    | Marathon            -> Marathon
    | Login               -> Login           { User -> User; Password -> Password; }
    | Logoff              -> Logoff          { }
    | LockWorkstation     -> LockWorkstation { }
    | Reboot              -> Reboot          { Mode = ParsedValue(Keyword, RebootMode.Default); }
    | RebootEnterSafeMode -> Reboot          { Mode = ParsedValue(Keyword, RebootMode.EnterSafeMode); }
    | RebootExitSafeMode  -> Reboot          { Mode = ParsedValue(Keyword, RebootMode.ExitSafeMode); }
    | WaitForReboot1      -> WaitForReboot   { TimeSpan -> TimeSpan; MaxRebootsCountOpt -> MaxRebootsCountOpt; }
    | WaitForReboot2      -> WaitForReboot   { TimeSpan -> TimeSpan; MaxRebootsCountOpt -> MaxRebootsCountOpt; }
    | Barrier             -> Barrier         { Expression -> BarrierExpr; }
  }

  map syntax Grammar.DeploymentOption -> DeploymentOption
  {
    | Success    -> Success   { Value -> Value; }
    | ForReboot1 -> ForReboot { Value -> Value; }
    | ForReboot2 -> ForReboot { Value -> Value; }
    | Timeout    -> Timeout   { Value -> Value; }
  }

  map syntax Grammar.DefDeclaration -> Definition
  {
    | Ordinary   -> Ordinary   { Reference -> Reference; DefExpr -> Expr; }
    | Predefined -> Predefined { Reference -> Reference; DefExpr -> Expr; }
  }

  map syntax Grammar.DefEnv -> Definition.Ordinary
  {
    Reference -> Reference;
    DefExpr   -> Expr;
  }

  map syntax Grammar.ParameterCurrying -> Definition.Ordinary
  {
    Reference -> Reference;
    DefExpr   -> Expr;
  }

  map syntax Grammar.CommandCall -> CommandCall
  {
    Command         -> Command;
    Arguments.Item1 -> Arguments;
  }

  map syntax Grammar.CommandCallArgument -> CommandCallArgument
  {
    | Input -> CommmandCallInputArgument
      {
        ParameterName -> ParameterName;
        Value         -> Value;
      }

    | Output -> CommmandCallOutputArgument
      {
        VariableName  -> Name;
        ParameterName -> ParameterName;
      }

    | InputShort -> CommmandCallInputArgument
      {
        Reference -> ParameterName;
        DefExpr.Reference { Reference -> Reference; } -> Value;
      }
  }

  map syntax Grammar.DefExpr -> DefExpr
  {
    | ListLiteral               -> ListLiteral               { Elements.Item1 -> Elements; }
    | StringLiteral             -> String                    { StringLiteral -> Value; }
    | True                      -> True                      {  }
    | False                     -> False                     {  }
    | Reference                 -> Reference                 { this.Reference -> Reference; }
    | MemberAccess              -> MemberAccess              { Expr-> Expr; Member -> Member; }
    | Tuple                     -> Tuple                     { Items.Item1 -> Items; }
    | ObjectInitializer         -> ObjectInitializer         { Properties.Item1 -> Properties; }
    | RealLiteral               = DefExpr.RealLiteral(Location.WithSpan(RealLiteral));
    | DecimalIntegerLiteral     = DefExpr.DecimalIntegerLiteral(Lit.Location);
    | HexadecimalIntegerLiteral = DefExpr.HexadecimalIntegerLiteral(Lit.Location);
  }

  map syntax Grammar.PropertyInitializer -> PropertyInitializer
  {
    Name    -> Name;
    DefExpr -> Value;
  }

  map syntax Grammar.Field -> Field
  {
    Name          -> Name;
    AnyType       -> Type;
    match (DefExprOpt)
    {
      | Some((_, e)) -> Some(e)
      | None -> None()
    } -> Value;
    Attributes -> Attributes;
  }

  map syntax Grammar.SuiteStatement -> SuiteStatementAst
  {
    | CallTest -> CallScenario { Scenario -> Scenario; }
  }


  map syntax Grammar.Environment -> EnvironmentAst
  {
    Platform -> Platform;
    Product  -> Product;
  }

  map syntax Grammar.StringLiteral -> CSharp.StringLiteral {}

  map syntax Grammar.StringLiteral.RegularStringLiteral -> CSharp.StringLiteral { Lit }

  map syntax Grammar.StringLiteral.VerbatimStringLiteral -> CSharp.StringLiteral { Lit }

  map syntax Grammar.BinariesFolder -> DefExpr { Value }
}
