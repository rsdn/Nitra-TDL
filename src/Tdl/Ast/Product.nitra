using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Product : NamespaceMember, TypedDeclaration
  {
    symbol
    {
    stage 1:
      in ProductType : ProductTypeSymbol;
      SpanClass = TdlLang.ProductSpanClass;
    }

  stage 1:
    out ProductTypeRef : Ref[ProductTypeSymbol];

    ProductType.Scope  = Scope;
    ProductTypeRef     = ProductType.Ref.Resolve();
    Symbol.ProductType = ProductTypeRef.Symbol;
    Symbol.Type        = Symbol.ProductType;

    ProductType : Reference;

    | ignore-case Def
      {
        symbol
        {
        stage 3:
          in Defs : ImmutableArray[Def];

          Kind           = "product";
          IsSameIdentity = candidate is Tdl.Product;
        }
      stage 4:
        out Stage4 : object = null;

        Definitions.DefinitionScope = Symbol.ProductType.Scope.UnionWith(context.GetVmCapabilityScope());
        Definitions.Scope           = Scope.HideWith(context.GetExternalSymbolTable());
        Symbol.Defs                 = await TdlUtils.MakeDefinitions(Definitions, context, Symbol.Type, Definitions.SymbolRef, VNone());

        Name.CheckRequired(context, "field", Symbol.ProductType.MemberTable.GetAllSymbols(), Symbol.Defs, Stage4);

        Definitions : Definition*;
      }
    | ignore-case Set
      {
        symbol
        {
          stage 2:
            in AllProducts : ImmutableArray[Product.DefSymbol];
          stage 1:
            in Products    : ImmutableArray[ProductSymbol];

          Kind           = "product set";
          IsSameIdentity = candidate is Tdl.Product;
        }

        Products.Scope     = Scope;
        Symbol.Products    = TdlUtils.MakeProducts(Products.Ref);
        Symbol.AllProducts = TdlUtils.MakeAllProducts(Symbol, Symbol.Products);

        CheckForRecursionProduct(context, Symbol, Symbol.AllProducts);

        Products : Reference*;
      }
  } // Product
}
