using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  ignore-case declaration ProductType : NamespaceMember, Container, Type, SupportsInheritanceType
  {
    symbol
    {
    stage 2:
      in Defs : ImmutableArray[Def];

      Scope          = MemberTable;
      Kind           = "product type";
      IsSameIdentity = candidate is Tdl.ProductType;
      SpanClass      = TdlLang.TdlTypeSpanClass;
    }

    Name.ReportProductTypeFields(context, Fields.Symbol);

    Symbol.BaseTypeSet |= context.GetProductTypeSymbol();

    Fields.ContainingTable      = Symbol.MemberTable;
    Fields.Scope                = Scope.UnionWith(context.GetExternalSymbolTable());
    Definitions.DefinitionScope = Symbol.Scope;
    Definitions.Scope           = Scope.HideWith(context.GetExternalSymbolTable());
    Symbol.Defs                 = await TdlUtils.MakeDefinitions(Definitions, context, Symbol, Definitions.SymbolRef, VNone());

    DefinePredefinedFields(context, Symbol.MemberTable);
    UpdateDefaultValues(context, Symbol.Defs, Symbol.MemberTable, Scope);

    Fields      : Field*;
    Definitions : Definition*;
  }
}
