using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System;
using System.Collections.Immutable;
using System.Linq;

namespace Tdl
{
  abstract ast Action : BindableAst
  {
    in InGenerator : bool;
  stage 2:
    out ScenarioActions : ScenarioAction;

    | Runner
      {
      stage 1:
        out RunnerRef : Ref[RunnerSymbol];

        ScenarioActions = ScenarioAction.Runner(Location, RunnerRef.Symbol, Arguments.Result.ToImmutableArray());

        Name.Scope                = Scope;
        Arguments.Scope           = context.GetExternalSymbolTable().HideWith(Scope);
        Arguments.ParametersScope = RunnerRef.Symbol.Scope;
        RunnerRef                 = Name.Ref.Resolve();

        Name.ValidateRunnerArguments(RunnerRef.Symbol.Parameters, Arguments, context);

        Name      : Reference;
        Arguments : RunnerArgument*;
      }

    | Method
      {
      stage 1:
        out MethodRef : Ref[Member.MethodSymbol];
        in Fake : Ref[Member.MethodSymbol];

        MethodRef = Fake;
        ScenarioActions         = ScenarioAction.Method(Method.Location, Method.Result, MaxRebootsCountOpt.Result, BinariesFolderOpt.Result, ContinueOnErrorOpt);

        Method            .Scope            = Scope;
        MaxRebootsCountOpt.Scope            = Scope;
        BinariesFolderOpt .Scope            = Scope;

        Method            .NameScopeFactory = context.GetMethodScopeFactory();

        Method            .ExpectedType     = context.ToTdlContext().MethodType;
        MaxRebootsCountOpt.ExpectedType     = context.GetType("int");
        BinariesFolderOpt .ExpectedType     = context.GetType("string");

        Method             : DefExpr;
        MaxRebootsCountOpt : DefExpr?; // int
        BinariesFolderOpt  : DefExpr?; // string
        ContinueOnErrorOpt : ParsedValue[bool];

        //when (!(Method is DefExpr.MemberAccess))
        //  Method.Error(context, "Invalid method reference. Only qualified method references supported, e.g.: MyType.MyMethod.");
      }
    | Script
      {
        ScenarioActions = ScenarioAction.Script(Name.Location, Name.Result, Arguments.Result,
          TdlUtils.MakeDefinitions(context, Definitions, Definitions.SymbolRef), MaxRebootsCountOpt.Result);

        Name              .Scope        = Scope;
        Arguments         .Scope        = Scope;
        MaxRebootsCountOpt.Scope        = Scope;

        Name              .ExpectedType = context.GetType("string");
        Arguments         .ExpectedType = context.GetType("string");
        MaxRebootsCountOpt.ExpectedType = context.GetType("int");

        Name               : DefExpr;
        Arguments          : DefExpr*;
        Definitions        : Definition*;
        MaxRebootsCountOpt : DefExpr?;
      }

    | Config
      {
        ScenarioActions = ScenarioAction.Config(Path.Location, Path.Result, MaxRebootsCountOpt.Result);

        Path              .Scope        = Scope;
        MaxRebootsCountOpt.Scope        = Scope;

        Path              .ExpectedType = context.GetType("string");
        MaxRebootsCountOpt.ExpectedType = context.GetType("int");

        Path               : DefExpr;
        MaxRebootsCountOpt : DefExpr?;
      }

    | GTest
      {
        ScenarioActions = ScenarioAction.GTest(Name.Location, Name.Result, Arguments.Result, MaxRebootsCountOpt.Result);

        Name              .Scope        = Scope;
        Arguments         .Scope        = Scope;
        MaxRebootsCountOpt.Scope        = Scope;

        Name              .ExpectedType = context.GetType("string");
        Arguments         .ExpectedType = context.GetType("string");
        MaxRebootsCountOpt.ExpectedType = context.GetType("int");

        Name               : DefExpr;
        Arguments          : DefExpr*;
        MaxRebootsCountOpt : DefExpr?;
      }

    | XCode
      {
        ScenarioActions = ScenarioAction.XCode(Container.Location, Container.Result, XcodePath.Result, MaxRebootsCountOpt.Result);

        Container         .Scope        = Scope;
        XcodePath         .Scope        = Scope;
        MaxRebootsCountOpt.Scope        = Scope;

        Container         .ExpectedType = context.GetType("string");
        XcodePath         .ExpectedType = context.GetType("string");
        MaxRebootsCountOpt.ExpectedType = context.GetType("int");

        Container          : DefExpr;
        XcodePath          : DefExpr;
        MaxRebootsCountOpt : DefExpr?;
      }

    | VsTest
      {
        ScenarioActions = ScenarioAction.VsTest(Container.Location, Container.Result, VsTestRunCmdLineOpt.Result, FilterOpt.Result, VsTestPlatformOpt.Result, VsTestFrameworkOpt.Result, VsTestAdditionalOptionsOpt.Result, MaxRebootsCountOpt.Result);

        Container                 .Scope        = Scope;
        VsTestRunCmdLineOpt       .Scope        = Scope;
        FilterOpt                 .Scope        = Scope;
        VsTestPlatformOpt         .Scope        = Scope;
        VsTestFrameworkOpt        .Scope        = Scope;
        VsTestAdditionalOptionsOpt.Scope        = Scope;
        MaxRebootsCountOpt        .Scope        = Scope;

        Container                 .ExpectedType = context.GetType("string");
        VsTestRunCmdLineOpt       .ExpectedType = context.GetType("string");
        FilterOpt                 .ExpectedType = context.GetType("string");
        VsTestPlatformOpt         .ExpectedType = context.GetType("string");
        VsTestFrameworkOpt        .ExpectedType = context.GetType("string");
        VsTestAdditionalOptionsOpt.ExpectedType = context.GetType("string");
        MaxRebootsCountOpt        .ExpectedType = context.GetType("int");

        Container                  : DefExpr;
        VsTestRunCmdLineOpt        : DefExpr?;
        FilterOpt                  : DefExpr?;
        VsTestPlatformOpt          : DefExpr?;
        VsTestFrameworkOpt         : DefExpr?;
        VsTestAdditionalOptionsOpt : DefExpr?;
        MaxRebootsCountOpt         : DefExpr?;
      }

    | Apk
      {
        ScenarioActions = ScenarioAction.Apk(Name.Location, Name.Result, FilterOpt.Result, RunnerPath.Result, MaxRebootsCountOpt.Result);

        Name              .Scope        = Scope;
        FilterOpt         .Scope        = Scope;
        RunnerPath        .Scope        = Scope;
        MaxRebootsCountOpt.Scope        = Scope;

        Name              .ExpectedType = context.GetType("string");
        FilterOpt         .ExpectedType = context.GetType("string");
        RunnerPath        .ExpectedType = context.GetType("string");
        MaxRebootsCountOpt.ExpectedType = context.GetType("int");

        Name               : DefExpr;
        FilterOpt          : DefExpr?;
        RunnerPath         : DefExpr;
        MaxRebootsCountOpt : DefExpr?;
      }

    | Marathon
      {
        ScenarioActions = ScenarioAction.Marathon(TestContainerApk.Location, TestContainerApk.Result, AppApk.Result, RunnerPath.Result,
          Filter.Result, BinariesFolder.Result, MaxRebootsCountOpt.Result);

        TestContainerApk  .Scope = Scope;
        AppApk            .Scope = Scope;
        RunnerPath        .Scope = Scope;
        Filter            .Scope = Scope;
        BinariesFolder    .Scope = Scope;
        MaxRebootsCountOpt.Scope = Scope;

        TestContainerApk.ExpectedType = context.GetType("string");
        AppApk.ExpectedType = context.GetType("string");
        RunnerPath.ExpectedType = context.GetType("string");
        Filter.ExpectedType = context.GetType("string");
        BinariesFolder.ExpectedType = context.GetType("string");
        MaxRebootsCountOpt.ExpectedType = context.GetType("int");

        TestContainerApk   : DefExpr;
        AppApk             : DefExpr;
        RunnerPath         : DefExpr;
        Filter             : DefExpr;
        BinariesFolder     : DefExpr;
        MaxRebootsCountOpt : DefExpr?;
      }

    | Login
      {
        ScenarioActions = ScenarioAction.Login(this.Location, User.Result, Password.Result);

        User.ExpectedType = context.GetType("string");
        Password.ExpectedType = context.GetType("string");

        User               : DefExpr;
        Password           : DefExpr;
      }

    | Logoff          { ScenarioActions = ScenarioAction.Logoff(this.Location); }
    | LockWorkstation { ScenarioActions = ScenarioAction.LockWorkstation(this.Location); }
    | Reboot
      {
        ScenarioActions = ScenarioAction.Reboot(this.Location, Mode.ValueOrDefault);
        Mode : ParsedValue[RebootMode];
      }
    | WaitForReboot
      {
        ScenarioActions = ScenarioAction.WaitForReboot(this.Location, TimeSpan.Value, MaxRebootsCountOpt.Result);

        TimeSpan           : ParsedValue[string];
        MaxRebootsCountOpt : DefExpr?;
      }
    | Barrier
      {
        BarrierExpr.ScopeIn = Scope.HideWith(context.GetBarrierScope());
        ScenarioActions     = await TdlUtils.MakeScenarioActions(context, BarrierExpr);

        BarrierExpr : DotNet.Expr;
      }
  }
}
