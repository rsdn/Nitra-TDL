using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Deployment : NamespaceMember, TypedDeclaration, UsedDeclaration
  {
    symbol
    {
      Type = context.GetDeploymentTypeSymbol();

    stage 2:
      in AggregateParametersScope : Scope;
      in AllDeployments : ImmutableArray[DeploymentSymbol];
      in DashboardVisibleParameters : ImmutableArray[DeclarationSymbol];
    }

    Symbol.AllDeployments = TdlUtils.CheckForRecursionDeployment(Name, context, Symbol, Symbol.AggregateParametersScope);
    Modifier.Symbol       = Symbol;

    Modifier : DeploymentModifier?;

    when (!Symbol.IsUsed && !Symbol.Name.StartsWith("_") && !(context.Project is Nitra.ProjectSystem.FsProject[IAst]))
      Name.Warning(context, "Unused deployment.");

    | ignore-case Empty
      {
        symbol
        {
          AggregateParametersScope   = EmptyScope.Instance;
          AllDeployments             = ImmutableArray.Empty;
          DashboardVisibleParameters = ImmutableArray.Empty;
          SpanClass                = TdlLang.DeploymentSpanClass;
          IsSameIdentity           = candidate is Tdl.Deployment;
        }
      }

    | ignore-case Script : Parameterizable, DeploymentOptionsHost
      {
        symbol
        {
          in ScriptReference : ScriptReference;

        stage 3:
          in Defs            : ImmutableArray[UntypedDef];

          Kind           = "deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
          MakeHint       = TdlUtils.DeploymentMakeHint(symbolCache, this);
        }

        Content.Symbol                    = Symbol;
        Symbol.AggregateParametersScope   = Symbol.ParameterScope;
        Definitions.Scope                 = Symbol.ParameterScope;
        Symbol.Defs                       = TdlUtils.MakeUntypedDefinitions(Definitions, context);
        Parameters.Scope                  = Scope.UnionWith(context.GetExternalSymbolTable());
        Parameters.BuildInvocationScope   = context.BuildInvocationScope(Scope);
        Symbol.DashboardVisibleParameters = await TdlUtils.GetDashboardVisibleParameters(Symbol.Parameters);

        Content         : DeploymentScriptContent;
        Definitions     : Definition*;
      }
    | ignore-case Code : Parameterizable, DeploymentOptionsHost
      {
        symbol
        {
          table Variables;

          Kind           = "deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
          MakeHint       = TdlUtils.DeploymentMakeHint(symbolCache, this);
        }

        Parameters.Scope                  = Scope.UnionWith(context.GetExternalSymbolTable());
        Commands.StepNumberIn             = 0;
        Commands.Variables                = Symbol.Variables;
        Commands.OuterScope               = Scope;
        Commands.LocalScope               = Symbol.ParameterScope.UnionWith(Symbol.Variables);
        Symbol.AggregateParametersScope   = Symbol.ParameterScope;
        Symbol.DashboardVisibleParameters = await TdlUtils.GetDashboardVisibleParameters(Symbol.Parameters);

        Commands : CommandCall*;
      }
    | ignore-case Set
      {
        symbol
        {
        stage 1:
          in Deployments : ImmutableArray[DeploymentSymbol];

          Kind           = "deployment set";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
        }

        Symbol.AggregateParametersScope   = await TdlUtils.MakeAggregateParametersScope(Symbol.Deployments);
        Symbol.DashboardVisibleParameters = await TdlUtils.GetDashboardVisibleParameters(ImmutableArray.Empty, Symbol.Deployments);
        Symbol.Deployments                = TdlUtils.MakeDeployments(Deployments.Ref);

        Deployments.Scope                 = Scope;
        Deployments.ContainingTable       = ContainingTable;

        SetUsed(Symbol.Deployments, true);

        Deployments : DeploymentExpr*;
      }

    | ignore-case Currying : Parameterizable
      {
        symbol
        {
          in BaseDeployment  : DeploymentSymbol;
          in ExcludedParams  : ImmutableArray[FormalParameterSymbol];
          in ParameterValues : ImmutableArray[Def];

          Kind           = "deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
        }

        out BaseDeploymentRef : Ref[DeploymentSymbol];

        BaseDeployment.Scope              = Scope;
        BaseDeploymentRef                 = BaseDeployment.Ref.Resolve();
        Symbol.BaseDeployment             = BaseDeploymentRef.Symbol;
                                          
        CurredParameters.Scope            = Scope.UnionWith(context.GetExternalSymbolTable()).HideWith(Symbol.ParameterScope);
        CurredParameters.DefinitionScope  = await TdlUtils.MakeParameterScope(BaseDeploymentRef.Symbol.AggregateParametersScope, ImmutableArray.Empty);
        Symbol.ExcludedParams             = TdlUtils.MakeExcludedParams(CurredParameters.SymbolRef);
        Symbol.AggregateParametersScope   = TdlUtils.MakeCurryingScope(CurredParameters.DefinitionScope, Symbol.ExcludedParams).HideWith(Symbol.ParameterScope);
        Symbol.DashboardVisibleParameters = await TdlUtils.GetDashboardVisibleParameters(Symbol.Parameters, array[Symbol.BaseDeployment]);
        Symbol.ParameterValues            = TdlUtils.MakeDefinitions(CurredParameters, context, Symbol.Type, CurredParameters.SymbolRef);
        Symbol.BaseDeployment.IsUsed      = true;
        Parameters.Scope                  = Scope.UnionWith(context.GetExternalSymbolTable());

        BaseDeployment   : Reference;
        CurredParameters : Definition*;
      }
    | ignore-case Select : Parameterizable
      {
        symbol
        {
          in Deployments : ImmutableArray[ImmutableArray[DeploymentSymbol]];
          in Cases       : ImmutableArray[ImmutableArray[string]];

          Kind           = "select deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
        }

        Symbol.Deployments                = Cases.Symbols;
        Symbol.AggregateParametersScope   = await TdlUtils.MakeSelectAggregateParametersScope(Symbol.ParameterScope, Symbol.Deployments);
        Symbol.DashboardVisibleParameters = await TdlUtils.GetDashboardVisibleParameters(Symbol.Parameters, TdlUtils.Flatten(Symbol.Deployments));
        Parameters.Scope                  = Scope;
        Cases.Scope                       = TdlUtils.MakeDeploymentScope(Scope);
        Cases.ContainingTable             = ContainingTable;
        Symbol.Cases                      = Cases.Cases;

        CheckSelectDeployment(context, Cases, Parameters.Count);

        Cases      : Case*;
      }
    | ignore-case Import : Parameterizable
      {
        symbol
        {
        stage 3:
          in Defs            : ImmutableArray[UntypedDef];

          Kind           = "import deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
        }

        Symbol.AggregateParametersScope = Symbol.ParameterScope;
        Definitions.DefinitionScope     = context.GetDeploymentImportScope();
        Definitions.Scope               = Symbol.ParameterScope;
        Symbol.Defs                     = TdlUtils.MakeUntypedDefinitions(Definitions, context, ["Source"]);
        Parameters.Scope                = Scope.UnionWith(context.GetExternalSymbolTable());
        Parameters.BuildInvocationScope = context.BuildInvocationScope(Scope);

        Definitions     : Definition*;
      }
  } // Deployment
}
