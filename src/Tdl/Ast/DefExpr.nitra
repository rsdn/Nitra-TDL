using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Globalization;

namespace Tdl
{
  abstract ast DefExpr : BindableAst
  {
  stage 1:
    in  NameScopeFactory : ScopeFactory = ScopeFactories.Default;
  stage 2:
    in  ExpectedType : TypeSymbol;
    out Type         : TypeSymbol;
    out Result       : Tdl.Expr;

    unless (Type.SubtypeUnifyOf(ExpectedType))
      Error(context, $"Expected $(TdlUtils.Esc(self.ExpectedType)), got $(TdlUtils.Esc(self.Type))");

    | Reference
      {
        Reference.Scope = NameScopeFactory(Scope);
        Result          = Expr.Reference(Reference.Ref.Symbol);
        Type            = await context.MakeType(Reference.Ref.Symbol);

        SetUsed(Reference.Ref.Symbol, true);

        Reference : Declarations.Reference;
      }
    | MemberAccess
      {
        Expr.NameScopeFactory = NameScopeFactory;
        Type                  = await context.MakeType(Member.Ref.Symbol);
        Expr.Scope            = Scope;
        Member.Scope          = NameScopeFactory(TdlUtils.GetMembers(Expr.Result));
        Result                = Expr.MemberAccess(Expr.Result, Member.Ref.Symbol, Type);

        SetUsed(Member.Ref.Symbol, true);

        Expr   : DefExpr;
        Member : Declarations.Reference;
      }
    | ListLiteral
      {
      stage 2:
        out ElementType : TypeSymbol;

        Result                = Expr.List(Elements.Result, Type);
        ElementType           = ProvidedTypeParam1(context, Type, "System.Collections.Generic.List", context.CreateFreeTypeVar());
        Require(context, Type, ExpectedType);
        Elements.ExpectedType = ElementType;
        Elements.Scope        = Scope;
        Type                  = context.CreateFreeTypeVar();

        Elements : DefExpr*;
      }

    | Tuple
      {
        Items.Scope = Scope;
        Type        = await context.MakeTupleType(Items.Type);
        Result      = Expr.Tuple(Items.Result, Type);

        CheckExpectedForTuple(context, Items, ExpectedType, Type);

        Items : DefExpr*;
      }

    | String
      {
        Type = context.GetStringType();
        Result = Expr.String(TdlUtils.ConvertStringLiteralOrNull(Value));

        Value : CSharp.StringLiteral;
      }
    | True                      { Type = context.GetBooleanType(); Result = Expr.True(); }
    | False                     { Type = context.GetBooleanType(); Result = Expr.False(); }
    | RealLiteral               { Type = context.GetDoubleType();  Result = Expr.Real(double.Parse(Location.GetText())); }
    | DecimalIntegerLiteral     { Type = context.GetInt32Type();   Result = Expr.Integer(int.Parse(Location.GetText())); }
    | HexadecimalIntegerLiteral { Type = context.GetInt32Type();   Result = Expr.Integer(int.Parse(Location.GetText().Substring(2), NumberStyles.HexNumber)); }
  }
}
