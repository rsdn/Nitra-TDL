using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Suite : NamespaceMember, TypedDeclaration
  {
    | ignore-case Def
      {
        symbol
        {
          in Platform           : PlatformSymbol;
          in Product            : ProductSymbol;
          in Statements         : ImmutableArray[SuiteStatement];
          in EntityOpt          : ValueOption[EntitySymbol];
          in BaseSuiteOpt       : ValueOption[Suite.DefSymbol];
          in DefinitionScope    : Scope;
        stage 3                 :
          in Predefineds        : ImmutableArray[Def];
          in Defs               : ImmutableArray[Def];
        stage 4                 :
          in DefaultDefs        : ImmutableArray[FormalParameterSymbol]; // Parameters of select deployments which not set explicitly.
          in SessionInitializer : ValueOption[DeploymentTreeNode];
          in SessionFinalizer   : ValueOption[DeploymentTreeNode];

          Kind           = "suite";
          SpanClass      = TdlLang.SuiteSpanClass;
          IsSameIdentity = candidate is Tdl.Suite;
        }

        out PlatformRefOpt    : ValueOption[Ref[PlatformSymbol]];
        out PlatformSymbolOpt : ValueOption[PlatformSymbol];

        out ProductRefOpt     : ValueOption[Ref[ProductSymbol]];
        out ProductSymbolOpt  : ValueOption[ProductSymbol];

        out EntityRefOpt      : ValueOption[Ref[EntitySymbol]];
        out BaseSuiteRefOpt   : ValueOption[Ref[Suite.DefSymbol]];

        PlatformOpt.Scope           = Scope;
        PlatformRefOpt              = PlatformOpt.Ref.ResolveOpt();
        PlatformSymbolOpt           = PlatformRefOpt.GetSymbolOpt();
        Symbol.Platform             = await context.MakeSuitePlatform(Name, PlatformSymbolOpt, Symbol.BaseSuiteOpt);

        ProductOpt.Scope            = Scope;
        ProductRefOpt               = ProductOpt.Ref.ResolveOpt();
        ProductSymbolOpt            = ProductRefOpt.GetSymbolOpt();
        Symbol.Product              = await context.MakeSuiteProduct(Name, ProductSymbolOpt, Symbol.BaseSuiteOpt);

        Statements.Scope            = Scope;
        Statements.ScopeIn          = EmptyScope.Instance;
        Symbol.Statements           = await TdlUtils.MakeStatements(Statements.Statement, Symbol.BaseSuiteOpt);

        Predefineds.DefinitionScope = Symbol.Type.Scope;
        Predefineds.Scope           = ContainingTable;
        Symbol.Predefineds          = await TdlUtils.MakeDefinitions(Predefineds, context, Symbol.Type, Predefineds.SymbolRef, VNone(), context.GetIsNotPredefinedSuiteField());

        Definitions.DefinitionScope = await TdlUtils.MakeParameterScope(Statements.ScopeOut.UnionWith(Symbol.Type.Scope).UnionWith(context.GetVmCapabilityScope()), Symbol.Predefineds, Symbol.BaseSuiteOpt);
        Definitions.Scope           = context.GetExternalSymbolTable().UnionWith(ContainingTable);
        Symbol.Defs                 = await TdlUtils.MakeDefinitions(Definitions, context, Symbol.Type, Definitions.SymbolRef, Symbol.BaseSuiteOpt, context.GetIsPredefinedSuiteField());
        Symbol.DefinitionScope      = Definitions.DefinitionScope;

        TypeOpt.Scope               = Scope;
        //TypeRef                     = await context.MakeSuiteType(TypeOpt.Ref, BaseSuiteRefOpt);//TypeOpt.Ref.GetValueOrDefault();
        Symbol.Type                 = await context.MakeSuiteType(TypeOpt.Ref, BaseSuiteRefOpt);//await context.ResolveSuiteTypeSymbol(TypeOpt, TypeRef);
        Symbol.DefaultDefs          = await Name.MakeDefaultDefs(context, Symbol.Defs, Definitions.DefinitionScope, Symbol.Product);

        EntityOpt.Scope             = Scope;
        EntityRefOpt                = EntityOpt.Ref.ResolveOpt();
        Symbol.EntityOpt            = EntityRefOpt.GetSymbolOpt();

        BaseSuiteRefOpt             = await context.MakeBaseSuite(TypeOpt.Ref);
        Symbol.BaseSuiteOpt         = BaseSuiteRefOpt.GetSymbolOpt();

        Symbol.SessionInitializer   = Api.TryMakeSessionInitializer(Name, context, Symbol.Product, Symbol.Defs, Symbol.Predefineds, Symbol.DefaultDefs);
        Symbol.SessionFinalizer     = Api.TryMakeSessionFinalizer  (Name, context, Symbol.Product, Symbol.Defs, Symbol.Predefineds, Symbol.DefaultDefs);

        SetUsed(Symbol.Statements);
        ValidateParameters(context, Symbol.Defs, Symbol.Statements, Symbol.Product.Type.Scope, Symbol.DefaultDefs);

        decompose AllDefinitions
        {
          Definitions : Definition.Ordinary*;
          Predefineds : Definition.Predefined*;
        }

        EntityOpt      : Reference?;
        TypeOpt        : Reference?;
        PlatformOpt    : Reference?;
        ProductOpt     : Reference?;
        AllDefinitions : Definition*;
        Statements     : SuiteStatementAst*;
      }

    | ignore-case List
      {
        symbol
        {
        stage 2:
          in AllSuites : ImmutableArray[SuiteSymbol]; // Defs + Generators
        stage 1:
          in Suites    : ImmutableArray[SuiteSymbol];

          Kind           = "suites";
          SpanClass      = TdlLang.SuiteSpanClass;
          IsSameIdentity = candidate is Suite.List;
        }
        stage 1:
          in SuitesRefs : ImmutableArray[Ref[SuiteSymbol]];

        SuitesRefs       = TdlUtils.Resolve(Suites.Ref);
        Symbol.Suites    = TdlUtils.ToSymbol(SuitesRefs);
        Symbol.AllSuites = TdlUtils.Flatten(Symbol.Suites);

        Suites.Scope  = Scope;

        CheckForRecursionSuite(context, Symbol, Symbol.AllSuites);

        Suites : Reference*;
      }
    | ignore-case Generator : Container
      {
        symbol
        {
          in Statements  : ImmutableArray[SuiteStatement];
          in Platform    : TypedDeclarationSymbol;
          in Product     : TypedDeclarationSymbol;
          in EntityOpt   : ValueOption[TypedDeclarationSymbol];
        stage 3          :
          in Predefineds : ImmutableArray[Def];
          in Defs        : ImmutableArray[Def];
        stage 4          :
          in DefaultDefs : ImmutableArray[FormalParameterSymbol]; // Parameters of select deployments which not set explicitly.
          in Froms       : ImmutableArray[Code.From];

          Scope          = MemberTable;
          Kind           = "scenario generator";
          IsSameIdentity = candidate is Tdl.Scenario;
          SpanClass      = TdlLang.ScenarioSpanClass;
        }
      stage 1:
        out PlatformRef  : Ref[TypedDeclarationSymbol];
        out ProductRef   : Ref[TypedDeclarationSymbol];
        out TypeRef      : Ref[DeclarationSymbol];
        out EntityRefOpt : ValueOption[Ref[TypedDeclarationSymbol]];

        Froms.Scope                 = Scope;
        Froms.ContainingTable       = Symbol.MemberTable;
        Symbol.Froms                = await TdlUtils.MakeFroms(Froms);

        Statements.Scope            = Scope;
        Statements.ScopeIn          = EmptyScope.Instance;
        Symbol.Statements           = Statements.Statement;

        Platform.Scope              = Scope.HideWith(Symbol.MemberTable);
        PlatformRef                 = Platform.Ref.Resolve();
        Symbol.Platform             = PlatformRef.Symbol;

        Product.Scope               = Platform.Scope;
        ProductRef                  = Product.Ref.Resolve();
        Symbol.Product              = ProductRef.Symbol;

        Predefineds.DefinitionScope = Symbol.Type.Scope;
        Predefineds.Scope           = ContainingTable.HideWith(Symbol.MemberTable);
        Symbol.Predefineds          = await TdlUtils.MakeDefinitions(Predefineds, context, Symbol.Type, Predefineds.SymbolRef, VNone(), context.GetIsNotPredefinedSuiteField());

        Definitions.DefinitionScope = await TdlUtils.MakeParameterScope(Statements.ScopeOut.UnionWith(Symbol.Type.Scope).UnionWith(context.GetVmCapabilityScope()), Symbol.Predefineds, VNone());
        Definitions.Scope           = context.GetExternalSymbolTable().UnionWith(ContainingTable).HideWith(Symbol.MemberTable);

        Symbol.Defs                 = await TdlUtils.MakeDefinitions(Definitions, context, Symbol.Type, Definitions.SymbolRef, VNone(), context.GetIsPredefinedSuiteField());

        TypeOpt.Scope               = Scope;
        TypeRef                     = TypeOpt.Ref.GetValueOrDefault();
        Symbol.Type                 = await context.ResolveSuiteTypeSymbol(TypeOpt, TypeRef);
        Symbol.DefaultDefs          = await Name.MakeDefaultDefs(context, Symbol.Defs, Definitions.DefinitionScope, Symbol.Product, Symbol.Froms);

        EntityOpt.Scope             = Platform.Scope;
        EntityRefOpt                = EntityOpt.Ref.ResolveOpt();
        Symbol.EntityOpt            = EntityRefOpt.GetSymbolOpt();

        Platform.  CheckExpected(context, context.GetPlatformTypeSymbol(), PlatformRef.Symbol.Type);
        Product.   CheckExpected(context, context.GetProductTypeSymbol(),  ProductRef.Symbol.Type);
        SetUsed(Symbol.Statements);
        ValidateParameters(context, Symbol.Defs, Symbol.Statements, Symbol.Product.Type.Scope, Symbol.DefaultDefs);
        Name.ValidateSessionInitializer(context, Symbol.Product, Symbol.Defs, Symbol.Predefineds, Symbol.DefaultDefs, Symbol.Froms);

        decompose AllDefinitions
        {
          Definitions : Definition.Ordinary*;
          Predefineds : Definition.Predefined*;
        }

        Froms           : From*;
        EntityOpt       : Reference?;
        TypeOpt         : Reference?;
        Platform        : Reference;
        Product         : Reference;
        AllDefinitions  : Definition*;
        Statements      : SuiteStatementAst*;
      }
  }
}
