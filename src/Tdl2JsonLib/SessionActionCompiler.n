using DotNet;

using Nitra;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using QuickType;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using System.Text;
using System.Text.Encoding;
using Tdl;

namespace Tdl2Json
{
  [Record]
  internal class SessionActionCompiler
  {
    _deploymentScriptHeader  : string;
    _deploymentToolPath      : string;

    [RecordIgnore] _leafsToNameMap       : Hashtable[list[DeploymentTreeNode.Leaf], string]            = Hashtable();
    [RecordIgnore] _leafsToActionMap     : Hashtable[list[DeploymentTreeNode.Leaf], SessionActionBase] = Hashtable();
    [RecordIgnore] _duplicateNameCounter : Hashtable[string, int]                                      = Hashtable();

    public GetSessionActionName(action : DeploymentTreeNode, variables : Dictionary[TypedDeclarationSymbol, Tdl.Expr]) : string
    {
      def leafs = ToList(action);

      when (leafs.IsEmpty)
        return null;

      mutable name;
      when (_leafsToNameMap.TryGetValue(leafs, out name))
        return name;

      def names = List();
      mutable compiler : DeploymentCodeCompiler;
      mutable accumulatedLeafs : List[_];

      def finalizeCodeCompiler()
      {
        def accumulated = accumulatedLeafs.ToNList();
        when (_leafsToNameMap.TryGetValue(accumulated, out name))
        {
          names.Add(name);
          compiler = null;
          return;
        }

        def (deployment, values) = compiler.Compile(_deploymentScriptHeader, _deploymentToolPath);
        def action =
          SessionScriptAction() <-
          {
            ScriptData  = deployment.ScriptData;
            ScriptArgs  = values;
            ReturnValue = deployment.ReturnValue;
          };

        _leafsToActionMap.Add(accumulated, action);
        names.Add(GetOrMakeName(accumulated));
        compiler = null;
      }

      foreach (leaf in leafs)
      {
        match (leaf)
        {
          | Leaf(_, Deployment.ScriptSymbol) =>
            when (compiler != null)
              finalizeCodeCompiler();
            def key = [leaf];
            names.Add(GetOrMakeName(key));
            TryAddLeaf(leaf, variables);

          | Leaf(vars, Deployment.CodeSymbol as deployment) =>
            def args = Hashtable();
            foreach (p in deployment.Parameters)
              args.Add(p.Name, MakeArgValue(p, vars, variables));

            when (accumulatedLeafs : object == null)
              accumulatedLeafs = List();
            accumulatedLeafs.Add(leaf);

            if (compiler : object == null)
              compiler = DeploymentCodeCompiler(deployment, args, callStack=[]);
            else unless (compiler.TryAdd(deployment, args, callStack=[]))
              finalizeCodeCompiler();
          | Leaf(_, d) => assert(false, "Unsupported deployment type" + d.GetType().Name);
        }
      }

      when (compiler != null)
        finalizeCodeCompiler();

      unless (leafs is [_])
        _leafsToActionMap.Add(leafs, SessionActionGroup() <- { Scripts = names.ToArray(); });
      name = GetOrMakeName(leafs);
      name
    }

    private TryAddLeaf(leaf : DeploymentTreeNode.Leaf, variables : Dictionary[TypedDeclarationSymbol, Tdl.Expr]) : void
    {
      def leafs = [leaf];
      mutable actions;
      when (_leafsToActionMap.TryGetValue(leafs, out actions))
        return;

      def action = MakePreSessionScriptAction(leaf, variables);
      _leafsToActionMap.Add(leafs, action);
      _ = GetOrMakeName(leafs);
    }

    private MakeArgValue(p : FormalParameterSymbol, values : Dictionary[string, Tdl.Expr], variables : Dictionary[TypedDeclarationSymbol, Tdl.Expr]) : object
    {
      def getPropertyValue(obj : object, prop : Declarations.DeclarationSymbol) : object * ResultKind
      {
        | (prod is Product.DefSymbol, field is Tdl.FieldSymbol) =>
          def res = prod.Defs
                        .Find(d => d.Symbol.Id == field.Id)
                        .Map(d => d.Expr.Calc(values, variables, getPropertyValue, getValue=Utils.GetWardenValue))
                        .WithDefault(($"No field $(field.Name) in $(prod.Name) product.", ResultKind.Error));
          res

        | _ => ("unsuported expression", ResultKind.Error)
      }
      mutable expr;
      def calc(expr : Tdl.Expr) : object
      {
        match (expr.Calc(values, variables, getPropertyValue, Utils.GetWardenValue))
        {
          | (_,     ResultKind.Missing)           => assert(false)
          | (_,     ResultKind.NotSet)            => Tdl.Expr.NotSetValue
          | (value, ResultKind.Value)             => value
          | (value, ResultKind.ExternalParameter) => "#(" + value + ")"
          | (value, ResultKind.GlobalParameter)   => "$(" + value + ")"
          | (value, ResultKind.Product)           => value
          | (value, ResultKind.VmCapability)      => value
          | (value, ResultKind.Error)             => throw NotSupportedException("An error has occurred when calculating '$expression': " + value)
          | (_,     ResultKind.External)          => throw NotSupportedException("Reference to externals root symbol is not allowed.")
        }
      }
      if (values.TryGetValue(p.Name, out expr))
        calc(expr)
      else
      {
        match (p.Default)
        {
          | None
          | Error
          | Overflow               => "<error>"
          | Null                   => "null"
          | Number (value, _, _)   => value.ToString()
          | String (value)         => value.ToString()
          | Bool   (value)         => value.ToString()
          | Custom (Tdl.Expr as e) => calc(e)
          | Custom (value)         => value.ToString()
          | Single (value)         => value.ToString()
          | Double (value)         => value.ToString()
          | Decimal(value)         => value.ToString()
        }
      }
    }

    public Compile() : Dictionary[string, SessionActionBase]
    {
      def result = Dictionary();

      foreach ((leafs, action) in _leafsToActionMap.KeyValuePairs)
          result.Add(GetOrMakeName(leafs), action);

      if (result.Count == 0) null else result
    }

    private MakePreSessionScriptAction(scriptNode : DeploymentTreeNode.Leaf, variables : Dictionary[TypedDeclarationSymbol, Tdl.Expr]) : SessionScriptAction
    {
      assert(scriptNode.deployment is Deployment.ScriptSymbol);
      def script = scriptNode.deployment :> Deployment.ScriptSymbol;
      def args = Hashtable();
      foreach (p in script.Parameters)
        args.Add(p.Name, MakeArgValue(p, scriptNode.variables, variables));

      def result =
        SessionScriptAction() <-
        {
          ScriptArgs = args;
          ReturnValue = script.Expected.ToNullable();
        };
      match (script.ScriptReference)
      {
        | ScriptReference.FilePath   as fp => result.ScriptPath = fp.Path.ValueOrDefault
        | ScriptReference.SourceCode as sc => result.ScriptData = UTF8.GetBytes(sc.Text.ValueOrDefault ?? ""); //result.ScriptDataExtension = sc.Extension.ValueOrDefault;
        | ScriptReference.EmbedFile  as ef =>
          def path = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(script.FirstParsedDeclarationOrDefault.Location.Source.File.FullName), ef.Path.Value));
          result.ScriptData          = File.ReadAllBytes(path);
          //result.ScriptDataExtension = Path.GetExtension(path);
      }
      result
    }

    private ToList(action : DeploymentTreeNode) : list[DeploymentTreeNode.Leaf]
    {
      | DeploymentTreeNode.Leaf as leaf => [leaf]
      | DeploymentTreeNode.Nodes(Normal, nodes) when nodes.All(_ is DeploymentTreeNode.Leaf) => nodes.OfType()
      | DeploymentTreeNode.Nodes => []
    }

    private GetOrMakeName(seq : list[DeploymentTreeNode.Leaf]) : string
    {
      mutable name;
      unless (_leafsToNameMap.TryGetValue(seq, out name))
      {
        def baseName = $<#..$(seq; "-"; x => x.deployment.Name)#>;
        mutable counter;
        _ = _duplicateNameCounter.TryGetValue(baseName, out counter);
        counter++;
        name = $"$baseName-$counter";
        _leafsToNameMap.Add(seq, name);
        _duplicateNameCounter[baseName] = counter;
      }
      name
    }
  } // class
} // namespace
