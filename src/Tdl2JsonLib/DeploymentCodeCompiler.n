using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Tdl;

using Nitra;
using Nitra.Declarations;

namespace Tdl2Json
{
  internal class DeploymentCodeCompiler
  {
    [Record]
    private class FreeParameterInfo
    {
      public Type         : TypeSymbol;
      public DefaultValue : object;
    }

    [Record]
    private class ClosedParameterInfo
    {
      [RecordIgnore]
      public mutable Name  : string;
      public         Type  : TypeSymbol;
      public         Value : object;
    }

    private static DeploymentScriptTemplate : string = ReadStringResource("Tdl2Json.DeploymentScriptTemplate.ps1");

    private         _initialStack     : list[DeploymentSymbol];
    private mutable _currentStack     : list[DeploymentSymbol];
    private         _symbols          : List[Deployment.CodeSymbol]                                  = List();
    private         _freeParameters   : Dictionary[string, FreeParameterInfo]                        = Dictionary(StringComparer.OrdinalIgnoreCase);
    private         _closedParameters : Dictionary[FormalParameterSymbol * int, ClosedParameterInfo] = Dictionary();
    private         _exitCode         : ParsedValue[int];
    private         _rebootExitCode   : ParsedValue[int];
    private mutable _timeout          : TimeSpan;
    private mutable _maxTimeout       : TimeSpan = TimeSpan.FromMinutes(19);

    public Name : string { get; private set; }

    public Count : int { get { _symbols.Count } }

    public this(symbol : Deployment.CodeSymbol, values : IReadOnlyDictionary[string, object], callStack : list[DeploymentSymbol])
    {
      Name            = symbol.Name;
      _exitCode       = symbol.Expected;
      _rebootExitCode = symbol.ForReboot;
      _timeout        = ParseTimeout(symbol.Timeout);
      _initialStack   = callStack;
      when (_timeout > _maxTimeout)
        _maxTimeout = _timeout;
      AddSymbol(symbol, values, callStack);
    }

    public TryAdd(symbol : Deployment.CodeSymbol, values : IReadOnlyDictionary[string, object], callStack : list[DeploymentSymbol]) : bool
    {
      when (_rebootExitCode.HasValue || symbol.ForReboot.HasValue)
        return false;

      when (_exitCode.ValueOrDefault != symbol.Expected.ValueOrDefault)
        return false;

      def otherTimeout = ParseTimeout(symbol.Timeout);
      when (otherTimeout > _maxTimeout)
        _maxTimeout = otherTimeout;

      foreach (parameter when !values.ContainsKey(parameter.Name) in symbol.Parameters)
      {
        mutable parameterInfo;
        when (_freeParameters.TryGetValue(parameter.Name, out parameterInfo))
        {
          def defaultValue = DeploymentCompiler.GetDefaultValue(parameter);
          when (!Equals(parameterInfo.DefaultValue, defaultValue))
            return false;
        }
      }

      AddSymbol(symbol, values, callStack);

      Name            = Name + Separators.DeploymentCodeSeparator + symbol.Name;
      def timeout     = _timeout + otherTimeout;
      // HACK!
      _timeout        = if (timeout > _maxTimeout) _maxTimeout else timeout;

      true
    }

    public TryGetNearestCaller() : DeploymentSymbol
    {
      mutable a = _initialStack;
      mutable b = _currentStack;
      def lengthDiff = a.Length - b.Length;

      for (mutable i = 0; i < lengthDiff; ++i)
        a = a.Tail;

      for (mutable i = lengthDiff; i < 0; ++i)
        b = b.Tail;

      def loop(_, _)
      {
        | (h1 :: t1, h2 :: t2) => if (h1 : object == h2) h1 else loop(t1, t2)
        | _ => null
      }
      loop(a, b)
    }

    public Compile(deploymentScriptHeader : string, deployerPath : FieldSymbol) : QuickType.Deployment * IDictionary[string, object]
    {
      def scriptArgs = SortedDictionary();
      def defaults   = SortedDictionary();
      def closedArgs = SortedDictionary();
      defaults.Add(" TDL Name ", Name);

      def deploymentParameters = StringBuilder();
      def deploymentCode       = StringBuilder();
      def deploymentPrologue   = StringBuilder().AppendLine(deploymentScriptHeader);

      def getParameterReference(p) { "$_csharp_" + p }

      def declareScriptParameter(name : string, type : TypeSymbol, isExternal : bool = false)
      {
        scriptArgs.Add(name, (if (isExternal) "#(" else "$(") + name + ")");
        when (scriptArgs.Count > 1)
          _ = deploymentParameters.AppendLine(",");

        def parameterName = "$" + name;
        def parameterReference = getParameterReference(name);

        def (type, value) =
          match (type.FullName) // FIXMY: Какой трэш! Почему типы то не использовал?
          {
            | "System.String"  | "string" => ("string", $<#('@"' + $(parameterName).Replace('"', '""') + '"')#>)
            | "System.Boolean" | "bool"   => ("string", $<#switch($(parameterName)) { "0" { "false" } "false" { "false" } "" { "false" } $$null { "false" } default { "true" } }#>)
            | type                        => (type,     $<#$(parameterName).ToString("", [System.Globalization.CultureInfo]::InvariantCulture)#>)
          };

        _ = deploymentParameters.Append($"  [$(type)] $(parameterName)");
        _ = deploymentPrologue.AppendLine($<#$(parameterReference) = $(value)#>);
      }

      foreach (pair in _freeParameters)
      {
        def name          = pair.Key;
        def parameterInfo = pair.Value;

        when (parameterInfo.DefaultValue != null)
          defaults.Add(name, parameterInfo.DefaultValue);

        declareScriptParameter(name, parameterInfo.Type);
      }

      mutable nameCounter : int;
      foreach (pair in _closedParameters)
      {
        def parameterInfo = pair.Value;
        when (string.IsNullOrEmpty(parameterInfo.Name))
        {
          def makeName()
          {
            def name = pair.Key[0].Name + nameCounter.ToString();
            ++nameCounter;
            if (_freeParameters.ContainsKey(name))
              makeName()
            else
              parameterInfo.Name = name
          }
          makeName();

          closedArgs.Add(parameterInfo.Name, parameterInfo.Value);
          declareScriptParameter(parameterInfo.Name, parameterInfo.Type);
        }
      }

      assert2(deployerPath != null);

      mutable deployerPathParameter = deployerPath.Name;
      for (mutable index = 1; scriptArgs.ContainsKey(deployerPathParameter); ++index)
        deployerPathParameter = deployerPath.Name + index.ToString();

      declareScriptParameter(deployerPathParameter, deployerPath.Type, isExternal = true);

      foreach (symbol in _symbols with symbolIndex)
      {
        _ = deploymentCode.Append("{ // ").AppendLine(symbol.Name);
        foreach (command in DeploymentCompiler.GetCommands(symbol))
        {
          def commandVariable = "command" + command.StepNumberIn;
          def commandType     = command.TypeRef.Symbol.FullName;
          _ = deploymentCode.AppendLine($"var $(commandVariable) = __runtime__.CreateCommand<$(commandType)>();");

          foreach (argument is Tdl.CommmandCallInputArgument in command.Arguments)
          {
            def expr = argument.Value;
            def value =
              match (expr)
              {
                | DefExpr.String
                | DefExpr.True
                | DefExpr.False
                | DefExpr.RealLiteral
                | DefExpr.DecimalIntegerLiteral
                | DefExpr.HexadecimalIntegerLiteral => expr.ToString()
                | DefExpr.Reference as x =>
                  match (x.Reference.Ref.Symbol)
                  {
                    | FormalParameterSymbol as p       =>
                      def key = (p, symbolIndex);
                      mutable parameterInfo;
                      getParameterReference(if (_closedParameters.TryGetValue(key, out parameterInfo)) parameterInfo.Name else p.Name);

                    | CommmandCallOutputArgumentSymbol => x.ToString()
                    | x => throw NotSupportedException($"Reference to '$(x)' is not supported in deployment code.")
                  }

                | x => throw NotSupportedException($"Expression '$(x)' is not supported in deployment code.")
              };

            def parameterName = argument.ParameterName.Text;
            _ = deploymentCode.AppendLine($"$(commandVariable).$(parameterName) = $(value);");
          }

          _ = deploymentCode.AppendLine($"__runtime__.ExecuteCommand($(commandVariable));");

          foreach (argument is Tdl.CommmandCallOutputArgument in command.Arguments)
          {
            def parameterName = argument.ParameterName.Text;
            def variableName  = argument.Name.Text;
            _ = deploymentCode.AppendLine($"var $(variableName) = $(commandVariable).$(parameterName);");
          }
        }
        _ = deploymentCode.AppendLine("}");
      }

      def deploymentScript = StringBuilder(DeploymentScriptTemplate)
        .Replace("{{Parameters}}", deploymentParameters.ToString())
        .Replace("{{Prologue}}",   deploymentPrologue.ToString())
        .Replace("{{Name}}",       Name)
        .Replace("{{Source}}",     deploymentCode.ToString())
        .Replace("{{Tool}}",       "& $" + deployerPathParameter)
        .ToString();

      (QuickType.Deployment() <-
        {
          Type                = QuickType.TypeEnum.Script;
          ScriptPath          = null;
          ScriptData          = Encoding.UTF8.GetBytes(deploymentScript);
          ScriptDataExtension = ".ps1";
          ReturnValue         = if (_exitCode.HasValue)       _exitCode.Value       else null;
          RebootExitCode      = if (_rebootExitCode.HasValue) _rebootExitCode.Value else null;
          Timeout             = _timeout.ToString();
          ScriptArgs          = scriptArgs;
          DefaultValues       = defaults;
      }, closedArgs)
    }

    private AddSymbol(symbol : Deployment.CodeSymbol, values : IReadOnlyDictionary[string, object], callStack : list[DeploymentSymbol]) : void
    {
      def symbolIndex = _symbols.Count;
      _symbols.Add(symbol);
      _currentStack = callStack;

      foreach (parameter in symbol.Parameters)
      {
        mutable value;
        if (values.TryGetValue(parameter.Name, out value))
        {
          def key = (parameter, symbolIndex);
          def parameterInfo = _closedParameters.Values.FirstOrDefault(p => Equals(p.Value, value) && TdlTypeUnifier.Instance.TryUnify(p.Type, parameter.Type))
            ?? ClosedParameterInfo(parameter.Type, value);
          _closedParameters.Add(key, parameterInfo);
        }
        else unless (_freeParameters.ContainsKey(parameter.Name))
        {
          def parameterInfo = FreeParameterInfo(parameter.Type, DeploymentCompiler.GetDefaultValue(parameter));
          _freeParameters.Add(parameter.Name, parameterInfo);
        }
      }
    }

    private static ParseTimeout(t : ParsedValue[string]) : TimeSpan
    {
      if (t.HasValue)
        TimeSpan.Parse(t.ValueOrDefault)
      else
        JsonGenerator.DefaulteTimeout
    }

    private static ReadStringResource(name : string) : string
    {
      using (stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
      using (reader = System.IO.StreamReader(stream))
        reader.ReadToEnd();
    }
  }
}
