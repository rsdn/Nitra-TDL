using Tdl.ScenarioAction;
using DotNet;
using Tdl;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tdl2Json
{
  class BarrierCompiler
  {
    static         _baseStableGuid : Guid = Guid.Parse("{BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB}");
    static mutable _counter        : uint;

    _barrierMap : Hashtable[string, int * Guid] = Hashtable();
    public MultiMachineId : Guid = Api.IncrementGuid(_baseStableGuid, { _counter++; _counter });

    public ScanBarriers(scenarios : Seq[ScenarioSymbol]) : void
    {
        foreach (scenario in scenarios)
        {
          | Tdl.Scenario.DefSymbol       as s => FillBarrierMap(s);
          | Tdl.Scenario.GeneratorSymbol as s => FillBarrierMap(s);
          | _ =>()
        }
    }

    FillBarrierMap(scenario : Tdl.Scenario.GeneratorSymbol) : void
    {
      foreach (action in scenario.Actions)
      {
        | Barrier          as b  => AddOrUpdateBarrierInfo(b.barrier.Name);
        | BarrierGenerator as bg =>
          foreach (dic in Api.SubstituteVariables(scenario.Froms, 0))
            AddOrUpdateBarrierInfo(MakeName(dic, bg));
        | _ => ()
      }
    }

    FillBarrierMap(scenario : Tdl.Scenario.DefSymbol) : void
    {
      def dic = Dictionary();
      foreach (action in scenario.Actions)
      {
        | Barrier          as b  => AddOrUpdateBarrierInfo(b.barrier.Name);
        | BarrierGenerator as bg =>
          def name = MakeName(dic, bg);
          AddOrUpdateBarrierInfo(name);
        | _ => ()
      }
    }

    public GetBarrierInfo(name : string) : int * Guid
    {
      mutable result;
      def ok = _barrierMap.TryGetValue(name, out result);
      assert2(ok);
      result
    }

    public GetBarrierInfo(dic : Dictionary[TypedDeclarationSymbol, Tdl.Expr], bg : BarrierGenerator) : int * Guid
    {
      GetBarrierInfo(MakeName(dic, bg))
    }

    public MakeName(dic : Dictionary[TypedDeclarationSymbol, Tdl.Expr], bg : BarrierGenerator) : string
    {
      def builder = Text.StringBuilder();
      foreach (part in bg.BarrierName)
      {
        | BarrierNamePart.String as s => _ = builder.Append(s.text);
        | BarrierNamePart.Reference as r =>
          if (r.symbol is TypedDeclarationSymbol as tds)
            _ = builder.Append(Api.TryResolveVar(dic, tds).Name);
          else
            _ = builder.Append(r.symbol.Name);
        | _ => ()
      }
      builder.ToString()
    }

    AddOrUpdateBarrierInfo(barrierName : string) : void
    {
      when (barrierName.Contains("\""))
      {
        assert2(false);
      }
      mutable info;
      if (_barrierMap.TryGetValue(barrierName, out info))
        _barrierMap[barrierName] = (info[0] + 1, info[1]);
      else
      {
        _counter++;
        _barrierMap[barrierName] = (1, Api.IncrementGuid(_baseStableGuid, _counter));
      }
    }
  } // class
} // namespace
